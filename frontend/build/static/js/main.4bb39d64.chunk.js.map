{"version":3,"sources":["constants/userConstants.js","constants/collegeConstants.js","constants/admissionConstants.js","constants/postConstants.js","store.js","reducers/userReducer.js","reducers/collegeReducer.js","reducers/admissionReducer.js","reducers/postReducer.js","actions/userAction.js","components/Header.js","components/Footer.js","components/HomeCarousel.js","screens/HomeScreen.js","components/FormContainer.js","components/Message.js","screens/LoginScreen.js","screens/RegisterScreen.js","screens/ProfileScreen.js","screens/ChangePasswordScreen.js","screens/BackgroundScreen.js","actions/collegeAction.js","components/College.js","components/SearchBar.js","screens/CollegeScreen.js","components/Map.js","screens/CollegeDetailScreen.js","actions/admissionAction.js","components/Admission.js","screens/AdmissionScreen.js","screens/NewAdmissionScreen.js","screens/AdmissionDetailScreen.js","screens/MyAdmissionsScreen.js","screens/AdmissionEditScreen.js","actions/postAction.js","components/Post.js","screens/ForumScreen.js","screens/NewPostScreen.js","screens/PostDetailScreen.js","screens/MyPostsScreen.js","screens/PostEditScreen.js","screens/CalculatorScreen.js","App.js","index.js"],"names":["LOGIN_SUCCESS","LOGIN_FAIL","REGISTER_SUCCESS","REGISTER_FAIL","LOGOUT","USER_PROFILE_SUCCESS","USER_PROFILE_FAIL","USER_PROFILE_RESET","USER_UPDATE_PROFILE_SUCCESS","USER_UPDATE_PROFILE_FAIL","USER_UPDATE_PROFILE_RESET","USER_CHANGE_PASSWORD_SUCCESS","USER_CHANGE_PASSWORD_FAIL","USER_BACKGROUND_SUCCESS","USER_BACKGROUND_FAIL","USER_BACKGROUND_RESET","USER_UPDATE_BACKGROUND_SUCCESS","USER_UPDATE_BACKGROUND_FAIL","USER_UPDATE_BACKGROUND_RESET","COLLEGE_LIST_SUCCESS","COLLEGE_LIST_FAIL","COLLEGE_DETAILS_SUCCESS","COLLEGE_DETAILS_FAIL","COLLEGE_BY_NAME_SUCCESS","COLLEGE_BY_NAME_FAIL","ADMISSION_CREATE_SUCCESS","ADMISSION_CREATE_FAIL","ADMISSION_CREATE_RESET","ADMISSION_UPDATE_SUCCESS","ADMISSION_UPDATE_FAIL","ADMISSION_UPDATE_RESET","ADMISSION_DELETE_SUCCESS","ADMISSION_DELETE_FAIL","ADMISSION_ALL_SUCCESS","ADMISSION_ALL_FAIL","ADMISSION_DETAIL_SUCCESS","ADMISSION_DETAIL_FAIL","ADMISSION_DETAIL_RESET","MY_ADMISSIONS_SUCCESS","MY_ADMISSIONS_FAIL","MY_ADMISSIONS_RESET","ADMISSION_BACKGROUND_SUCCESS","ADMISSION_BACKGROUND_FAIL","ADMISSION_COMMENT_SUCCESS","ADMISSION_COMMENT_FAIL","ADMISSION_COMMENT_RESET","ADMISSION_PERCENTAGE_SUCCESS","ADMISSION_PERCENTAGE_FAIL","ADMISSION_PERCENTAGE_RESET","POST_CREATE_SUCCESS","POST_CREATE_FAIL","POST_CREATE_RESET","POST_UPDATE_SUCCESS","POST_UPDATE_FAIL","POST_UPDATE_RESET","POST_DELETE_SUCCESS","POST_DELETE_FAIL","POST_ALL_SUCCESS","POST_ALL_FAIL","POST_DETAIL_SUCCESS","POST_DETAIL_FAIL","POST_DETAIL_RESET","MY_POSTS_SUCCESS","MY_POSTS_FAIL","MY_POSTS_RESET","POST_COMMENT_SUCCESS","POST_COMMENT_FAIL","POST_COMMENT_RESET","reducer","combineReducers","login","state","action","type","userInfo","payload","error","register","userProfile","user","userUpdateProfile","success","userChangePassword","userBackground","userUpdateBackground","collegeList","colleges","collegeDetails","college","collegeByName","admissionCreate","admission","admissionUpdate","admissionDelete","admissionAll","admissions","page","pages","admissionDetail","comments","myAdmissions","admissionBackground","admissionComment","admissionPercentage","percentage","postCreate","post","postUpdate","postDelete","postAll","posts","postDetail","myPosts","postComment","initialState","localStorage","getItem","JSON","parse","middleware","thunk","store","createStore","composeWithDevTools","applyMiddleware","logout","dispatch","a","removeItem","document","location","href","getBackground","getState","config","headers","Authorization","token","axios","get","data","response","message","Header","useDispatch","useSelector","Navbar","bg","variant","expand","collapseOnSelect","Container","to","Brand","Toggle","Collapse","id","Nav","className","Link","NavDropdown","title","username","Item","onClick","Footer","Row","Col","HomeCarousel","Carousel","pause","Image","src","fluid","HomeScreen","FormContainer","children","xs","md","Message","Alert","LoginScreen","history","useState","email","setEmail","password","setPassword","redirect","search","split","useEffect","push","Card","border","Img","Body","Form","onSubmit","e","preventDefault","setItem","stringify","Group","controlId","Label","Control","placeholder","value","onChange","target","Button","RegisterScreen","setUsername","confirmPassword","setConfirmPassword","validated","setValidated","setMessage","noValidate","currentTarget","checkValidity","required","Feedback","ProfileScreen","gender","setGender","setLocation","update","setUpdate","length","put","updateProfile","_id","disabled","as","ChangePasswordScreen","newPassword","setNewPassword","setTimeout","BackgroundScreen","school","setSchool","schoolLevel","setSchoolLevel","major","setMajor","gpa","setGpa","langTest","setLangTest","langScore","setLangScore","genTest","setGenTest","genScore","setGenScore","workLevel","setWorkLevel","workYears","setWorkYears","researchExp","setResearchExp","competitionExp","setCompetitionExp","otherInfo","setOtherInfo","updateBackground","max","rows","getColleges","keyword","College","image","Title","name","Text","ranking","description","withRouter","setKeyword","trim","CollegeScreen","match","params","SearchBar","map","mapContainerStyle","width","height","Map","lng","lat","mapContainerRef","useRef","mapboxToken","mapboxgl","container","current","accessToken","style","center","zoom","addControl","NavigationControl","Marker","setLngLat","addTo","remove","getMapbox","ref","CollegeDetailScreen","collegeId","ListGroup","website","rel","in_state_tuition","out_of_state_tuition","longitude","latitude","getAdmissionDetail","Admission","dateArray","updatedAt","AdmissionScreen","pageNum","getAllAdmissions","NewAdmissionScreen","setCollege","year","setYear","semester","setSemester","degree","setDegree","program","setProgram","result","setResult","date","setDate","setTitle","content","setContent","AdmissionDetailScreen","comment","setComment","admissionId","errorBackground","errorComment","alert","addCommentHandler","addComment","cmt","createdAt","substring","MyAdmissionsScreen","deleteHandler","window","confirm","delete","deleteAdmissionResult","Table","striped","bordered","hover","responsive","AdmissionEditScreen","errorUpdate","updateAdmissionResult","getPostDetail","Post","ForumScreen","getAllPosts","NewPostScreen","PostDetailScreen","postId","MyPostsScreen","deletePost","PostEditScreen","updatePost","CalculatorScreen","collegeName","setCollegeName","errorCollege","errorUser","errorPercentage","getCollegeByName","getAdmissionPercentage","App","path","component","exact","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.4bb39d64.chunk.js","sourcesContent":["export const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\nexport const LOGIN_FAIL = 'LOGIN_FAIL';\n\nexport const REGISTER_SUCCESS = 'REGISTER_SUCCESS';\nexport const REGISTER_FAIL = 'REGISTER_FAIL';\n\nexport const LOGOUT = 'LOGOUT';\n\nexport const USER_PROFILE_SUCCESS = 'USER_PROFILE_SUCCESS';\nexport const USER_PROFILE_FAIL = 'USER_PROFILE_FAIL';\nexport const USER_PROFILE_RESET = 'USER_PROFILE_RESET'\n\nexport const USER_UPDATE_PROFILE_SUCCESS = 'USER_UPDATE_PROFILE_SUCCESS';\nexport const USER_UPDATE_PROFILE_FAIL = 'USER_UPDATE_PROFILE_FAIL';\nexport const USER_UPDATE_PROFILE_RESET = 'USER_UPDATE_PROFILE_RESET';\n\nexport const USER_CHANGE_PASSWORD_SUCCESS = 'USER_CHANGE_PASSWORD_SUCCESS';\nexport const USER_CHANGE_PASSWORD_FAIL = 'USER_CHANGE_PASSWORD_FAIL';\n\nexport const USER_BACKGROUND_SUCCESS = 'USER_BACKGROUND_SUCCESS';\nexport const USER_BACKGROUND_FAIL = 'USER_BACKGROUND_FAIL';\nexport const USER_BACKGROUND_RESET = 'USER_BACKGROUND_RESET'\n\nexport const USER_UPDATE_BACKGROUND_SUCCESS = 'USER_UPDATE_BACKGROUND_SUCCESS';\nexport const USER_UPDATE_BACKGROUND_FAIL = 'USER_UPDATE_BACKGROUND_FAIL';\nexport const USER_UPDATE_BACKGROUND_RESET = 'USER_UPDATE_BACKGROUND_RESET';","export const COLLEGE_LIST_SUCCESS = 'COLLEGE_LIST_SUCCESS';\nexport const COLLEGE_LIST_FAIL = 'COLLEGE_LIST_FAIL';\n\nexport const COLLEGE_DETAILS_SUCCESS = 'COLLEGE_DETAILS_SUCCESS';\nexport const COLLEGE_DETAILS_FAIL = 'COLLEGE_DETAILS_FAIL';\n\nexport const COLLEGE_BY_NAME_SUCCESS = 'COLLEGE_BY_NAME_SUCCESS';\nexport const COLLEGE_BY_NAME_FAIL = 'COLLEGE_BY_NAME_FAIL';","export const ADMISSION_CREATE_SUCCESS = 'ADMISSION_CREATE_SUCCESS';\nexport const ADMISSION_CREATE_FAIL = 'ADMISSION_CREATE_FAIL';\nexport const ADMISSION_CREATE_RESET = 'ADMISSION_CREATE_RESET';\n\nexport const ADMISSION_UPDATE_SUCCESS = 'ADMISSION_UPDATE_SUCCESS';\nexport const ADMISSION_UPDATE_FAIL = 'ADMISSION_UPDATE_FAIL';\nexport const ADMISSION_UPDATE_RESET = 'ADMISSION_UPDATE_RESET';\n\nexport const ADMISSION_DELETE_SUCCESS = 'ADMISSION_DELETE_SUCCESS';\nexport const ADMISSION_DELETE_FAIL = 'ADMISSION_DELETE_FAIL';\n\nexport const ADMISSION_ALL_SUCCESS = 'ADMISSION_ALL_SUCCESS';\nexport const ADMISSION_ALL_FAIL = 'ADMISSION_ALL_FAIL';\n\nexport const ADMISSION_DETAIL_SUCCESS = 'ADMISSION_DETAIL_SUCCESS';\nexport const ADMISSION_DETAIL_FAIL = 'ADMISSION_DETAIL_FAIL';\nexport const ADMISSION_DETAIL_RESET = 'ADMISSION_DETAIL_RESET';\n\nexport const MY_ADMISSIONS_SUCCESS = 'MY_ADMISSIONS_SUCCESS';\nexport const MY_ADMISSIONS_FAIL = 'MY_ADMISSIONS_FAIL';\nexport const MY_ADMISSIONS_RESET = 'MY_BOOKS_RESET';\n\nexport const ADMISSION_BACKGROUND_SUCCESS = 'ADMISSION_BACKGROUND_SUCCESS';\nexport const ADMISSION_BACKGROUND_FAIL = 'ADMISSION_BACKGROUND_FAIL';\n\nexport const ADMISSION_COMMENT_SUCCESS = 'ADMISSION_COMMENT_SUCCESS';\nexport const ADMISSION_COMMENT_FAIL = 'ADMISSION_COMMENT_FAIL';\nexport const ADMISSION_COMMENT_RESET = 'ADMISSION_COMMENT_RESET';\n\nexport const ADMISSION_PERCENTAGE_SUCCESS = 'ADMISSION_PERCENTAGE_SUCCESS';\nexport const ADMISSION_PERCENTAGE_FAIL = 'ADMISSION_PERCENTAGE_FAIL';\nexport const ADMISSION_PERCENTAGE_RESET = 'ADMISSION_PERCENTAGE_RESET';","export const POST_CREATE_SUCCESS = 'POST_CREATE_SUCCESS';\nexport const POST_CREATE_FAIL = 'POST_CREATE_FAIL';\nexport const POST_CREATE_RESET = 'POST_CREATE_RESET';\n\nexport const POST_UPDATE_SUCCESS = 'POST_UPDATE_SUCCESS';\nexport const POST_UPDATE_FAIL = 'POST_UPDATE_FAIL';\nexport const POST_UPDATE_RESET = 'POST_UPDATE_RESET';\n\nexport const POST_DELETE_SUCCESS = 'POST_DELETE_SUCCESS';\nexport const POST_DELETE_FAIL = 'POST_DELETE_FAIL';\n\nexport const POST_ALL_SUCCESS = 'POST_ALL_SUCCESS';\nexport const POST_ALL_FAIL = 'POST_ALL_FAIL';\n\nexport const POST_DETAIL_SUCCESS = 'POST_DETAIL_SUCCESS';\nexport const POST_DETAIL_FAIL = 'POST_DETAIL_FAIL';\nexport const POST_DETAIL_RESET = 'POST_DETAIL_RESET';\n\nexport const MY_POSTS_SUCCESS = 'MY_POSTS_SUCCESS';\nexport const MY_POSTS_FAIL = 'MY_POSTS_FAIL';\nexport const MY_POSTS_RESET = 'MY_BOOKS_RESET';\n\nexport const POST_COMMENT_SUCCESS = 'POST_COMMENT_SUCCESS';\nexport const POST_COMMENT_FAIL = 'POST_COMMENT_FAIL';\nexport const POST_COMMENT_RESET = 'POST_COMMENT_RESET';","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { loginReducer, registerReducer, userProfileReducer, userUpdateProfileReducer, userChangePasswordReducer, userBackgroundReducer, userUpdateBackgroundReducer } from './reducers/userReducer';\nimport { collegeListReducer, collegeDetailsReducer, collegeByNameReducer } from './reducers/collegeReducer';\nimport { admissionCreateReducer, admissionUpdateReducer, admissionDeleteReducer, admissionAllReducer, admissionDetailReducer, myAdmissionsReducer, admissionBackgroundReducer, admissionCommentReducer, admissionPercentageReducer } from './reducers/admissionReducer';\nimport { postCreateReducer, postUpdateReducer, postDeleteReducer, postAllReducer, postDetailReducer, myPostsReducer, postCommentReducer } from './reducers/postReducer';\n\nconst reducer = combineReducers({\n    login: loginReducer,\n    register: registerReducer,\n    userProfile: userProfileReducer,\n    userUpdateProfile: userUpdateProfileReducer,\n    userChangePassword: userChangePasswordReducer,\n    userBackground: userBackgroundReducer,\n    userUpdateBackground: userUpdateBackgroundReducer,\n    collegeList: collegeListReducer,\n    collegeDetails: collegeDetailsReducer,\n    collegeByName: collegeByNameReducer,\n    admissionCreate: admissionCreateReducer,\n    admissionUpdate: admissionUpdateReducer,\n    admissionDelete: admissionDeleteReducer,\n    admissionAll: admissionAllReducer,\n    admissionDetail: admissionDetailReducer,\n    myAdmissions: myAdmissionsReducer,\n    admissionBackground: admissionBackgroundReducer,\n    admissionComment: admissionCommentReducer,\n    admissionPercentage: admissionPercentageReducer,\n    postCreate: postCreateReducer,\n    postUpdate: postUpdateReducer,\n    postDelete: postDeleteReducer,\n    postAll: postAllReducer,\n    postDetail: postDetailReducer,\n    myPosts: myPostsReducer,\n    postComment: postCommentReducer\n});\n\nconst userInfoFromLocalStorage = localStorage.getItem('userInfo') ? JSON.parse(localStorage.getItem('userInfo')) : null;\n\nconst initialState = {\n    login: {\n        userInfo: userInfoFromLocalStorage\n    }\n};\n\nconst middleware = [thunk];\n\nconst store = createStore(\n    reducer,\n    initialState,\n    composeWithDevTools(applyMiddleware(...middleware))\n);\n\nexport default store;","import {\n    LOGIN_SUCCESS,\n    LOGIN_FAIL,\n    REGISTER_SUCCESS,\n    REGISTER_FAIL,\n    LOGOUT,\n    USER_PROFILE_SUCCESS,\n    USER_PROFILE_FAIL,\n    USER_PROFILE_RESET,\n    USER_UPDATE_PROFILE_SUCCESS,\n    USER_UPDATE_PROFILE_FAIL,\n    USER_UPDATE_PROFILE_RESET,\n    USER_CHANGE_PASSWORD_SUCCESS,\n    USER_CHANGE_PASSWORD_FAIL,\n    USER_BACKGROUND_SUCCESS,\n    USER_BACKGROUND_FAIL,\n    USER_BACKGROUND_RESET,\n    USER_UPDATE_BACKGROUND_SUCCESS,\n    USER_UPDATE_BACKGROUND_FAIL,\n    USER_UPDATE_BACKGROUND_RESET\n} from '../constants/userConstants';\n\nexport const loginReducer = (state = {}, action) => {\n    switch (action.type) {\n        case LOGIN_SUCCESS:\n            return {\n                userInfo: action.payload\n            };\n        case LOGIN_FAIL:\n            return {\n                error: action.payload\n            };\n        case LOGOUT:\n            return {}\n        default:\n            return state;\n    }\n}\n\nexport const registerReducer = (state = {}, action) => {\n    switch (action.type) {\n        case REGISTER_SUCCESS:\n            return {\n                userInfo: action.payload\n            };\n        case REGISTER_FAIL:\n            return {\n                error: action.payload\n            };\n        default:\n            return state;\n    }\n}\n\nexport const userProfileReducer = (state = { user: {} }, action) => {\n    switch (action.type) {\n        case USER_PROFILE_SUCCESS:\n            return {\n                user: action.payload\n            };\n        case USER_PROFILE_FAIL:\n            return {\n                error: action.payload\n            };\n        case USER_PROFILE_RESET:\n            return {\n                user: {}\n            }\n        default:\n            return state;\n    }\n}\n\nexport const userUpdateProfileReducer = (state = {}, action) => {\n    switch (action.type) {\n        case USER_UPDATE_PROFILE_SUCCESS:\n            return {\n                success: true, userInfo: action.payload\n            };\n        case USER_UPDATE_PROFILE_FAIL:\n            return {\n                error: action.payload\n            };\n        case USER_UPDATE_PROFILE_RESET:\n            return {}\n        default:\n            return state;\n    }\n}\n\nexport const userChangePasswordReducer = (state = {}, action) => {\n    switch (action.type) {\n        case USER_CHANGE_PASSWORD_SUCCESS:\n            return {\n                success: true, userInfo: action.payload\n            };\n        case USER_CHANGE_PASSWORD_FAIL:\n            return {\n                error: action.payload\n            };\n        default:\n            return state;\n    }\n}\n\nexport const userBackgroundReducer = (state = { user: {} }, action) => {\n    switch (action.type) {\n        case USER_BACKGROUND_SUCCESS:\n            return {\n                user: action.payload\n            };\n        case USER_BACKGROUND_FAIL:\n            return {\n                error: action.payload\n            };\n        case USER_BACKGROUND_RESET:\n            return {\n                user: {}\n            }\n        default:\n            return state;\n    }\n}\n\nexport const userUpdateBackgroundReducer = (state = {}, action) => {\n    switch (action.type) {\n        case USER_UPDATE_BACKGROUND_SUCCESS:\n            return {\n                success: true, userInfo: action.payload\n            };\n        case USER_UPDATE_BACKGROUND_FAIL:\n            return {\n                error: action.payload\n            };\n        case USER_UPDATE_BACKGROUND_RESET:\n            return {}\n        default:\n            return state;\n    }\n}","import {\n    COLLEGE_LIST_SUCCESS,\n    COLLEGE_LIST_FAIL,\n    COLLEGE_DETAILS_SUCCESS,\n    COLLEGE_DETAILS_FAIL,\n    COLLEGE_BY_NAME_SUCCESS,\n    COLLEGE_BY_NAME_FAIL\n} from '../constants/collegeConstants';\n\nexport const collegeListReducer = (state = { colleges: [] }, action) => {\n    switch (action.type) {\n        case COLLEGE_LIST_SUCCESS:\n            return {\n                colleges: action.payload\n            };\n        case COLLEGE_LIST_FAIL:\n            return {\n                error: action.payload\n            };\n        default:\n            return state;\n    }\n}\n\nexport const collegeDetailsReducer = (state = { college: {} }, action) => {\n    switch (action.type) {\n        case COLLEGE_DETAILS_SUCCESS:\n            return {\n                college: action.payload\n            };\n        case COLLEGE_DETAILS_FAIL:\n            return {\n                error: action.payload\n            };\n        default:\n            return state;\n    }\n}\n\nexport const collegeByNameReducer = (state = { college: {} }, action) => {\n    switch (action.type) {\n        case COLLEGE_BY_NAME_SUCCESS:\n            return {\n                college: action.payload\n            };\n        case COLLEGE_BY_NAME_FAIL:\n            return {\n                error: action.payload\n            };\n        default:\n            return state;\n    }\n}","import {\n    ADMISSION_CREATE_SUCCESS,\n    ADMISSION_CREATE_FAIL,\n    ADMISSION_CREATE_RESET,\n    ADMISSION_UPDATE_SUCCESS,\n    ADMISSION_UPDATE_FAIL,\n    ADMISSION_UPDATE_RESET,\n    ADMISSION_DELETE_SUCCESS,\n    ADMISSION_DELETE_FAIL,\n    ADMISSION_ALL_SUCCESS,\n    ADMISSION_ALL_FAIL,\n    ADMISSION_DETAIL_SUCCESS,\n    ADMISSION_DETAIL_FAIL,\n    ADMISSION_DETAIL_RESET,\n    MY_ADMISSIONS_SUCCESS,\n    MY_ADMISSIONS_FAIL,\n    MY_ADMISSIONS_RESET,\n    ADMISSION_BACKGROUND_SUCCESS,\n    ADMISSION_BACKGROUND_FAIL,\n    ADMISSION_COMMENT_SUCCESS,\n    ADMISSION_COMMENT_FAIL,\n    ADMISSION_COMMENT_RESET,\n    ADMISSION_PERCENTAGE_SUCCESS,\n    ADMISSION_PERCENTAGE_FAIL,\n    ADMISSION_PERCENTAGE_RESET\n} from '../constants/admissionConstants';\n\nexport const admissionCreateReducer = (state = {}, action) => {\n    switch (action.type) {\n        case ADMISSION_CREATE_SUCCESS:\n            return {\n                success: true,\n                admission: action.payload\n            };\n        case ADMISSION_CREATE_FAIL:\n            return {\n                error: action.payload\n            };\n        case ADMISSION_CREATE_RESET:\n            return {}\n        default:\n            return state;\n    }\n}\n\nexport const admissionUpdateReducer = (state = { admission: {} }, action) => {\n    switch (action.type) {\n        case ADMISSION_UPDATE_SUCCESS:\n            return {\n                success: true\n            };\n        case ADMISSION_UPDATE_FAIL:\n            return {\n                error: action.payload\n            };\n        case ADMISSION_UPDATE_RESET:\n            return {\n                admission: {}\n            }\n        default:\n            return state;\n    }\n}\n\nexport const admissionDeleteReducer = (state = {}, action) => {\n    switch (action.type) {\n        case ADMISSION_DELETE_SUCCESS:\n            return {\n                success: true\n            };\n        case ADMISSION_DELETE_FAIL:\n            return {\n                error: action.payload\n            };\n        default:\n            return state;\n    }\n}\n\nexport const admissionAllReducer = (state = { admissions: [] }, action) => {\n    switch (action.type) {\n        case ADMISSION_ALL_SUCCESS:\n            return {\n                admissions: action.payload.admissions,\n                page: action.payload.page,\n                pages: action.payload.pages\n            };\n        case ADMISSION_ALL_FAIL:\n            return {\n                error: action.payload\n            };\n        default:\n            return state;\n    }\n}\n\nexport const admissionDetailReducer = (state = { admission: { comments: [] } }, action) => {\n    switch (action.type) {\n        case ADMISSION_DETAIL_SUCCESS:\n            return {\n                admission: action.payload\n            };\n        case ADMISSION_DETAIL_FAIL:\n            return {\n                error: action.payload\n            };\n        case ADMISSION_DETAIL_RESET:\n            return {\n                admission: { comments: [] }\n            }\n        default:\n            return state;\n    }\n}\n\nexport const myAdmissionsReducer = (state = { admissions: [] }, action) => {\n    switch (action.type) {\n        case MY_ADMISSIONS_SUCCESS:\n            return {\n                admissions: action.payload\n            };\n        case MY_ADMISSIONS_FAIL:\n            return {\n                error: action.payload\n            };\n        case MY_ADMISSIONS_RESET:\n            return {\n                admissions: []\n            }\n        default:\n            return state;\n    }\n}\n\nexport const admissionBackgroundReducer = (state = { user: {} }, action) => {\n    switch (action.type) {\n        case ADMISSION_BACKGROUND_SUCCESS:\n            return {\n                user: action.payload\n            };\n        case ADMISSION_BACKGROUND_FAIL:\n            return {\n                error: action.payload\n            };\n        default:\n            return state;\n    }\n}\n\nexport const admissionCommentReducer = (state = {}, action) => {\n    switch (action.type) {\n        case ADMISSION_COMMENT_SUCCESS:\n            return {\n                success: true\n            };\n        case ADMISSION_COMMENT_FAIL:\n            return {\n                error: action.payload\n            };\n        case ADMISSION_COMMENT_RESET:\n            return {}\n        default:\n            return state;\n    }\n}\n\nexport const admissionPercentageReducer = (state = { percentage: {} }, action) => {\n    switch (action.type) {\n        case ADMISSION_PERCENTAGE_SUCCESS:\n            return {\n                percentage: action.payload\n            };\n        case ADMISSION_PERCENTAGE_FAIL:\n            return {\n                error: action.payload\n            };\n        case ADMISSION_PERCENTAGE_RESET:\n            return {\n                percentage: {}\n            }\n        default:\n            return state;\n    }\n}","import {\n    POST_CREATE_SUCCESS,\n    POST_CREATE_FAIL,\n    POST_CREATE_RESET,\n    POST_UPDATE_SUCCESS,\n    POST_UPDATE_FAIL,\n    POST_UPDATE_RESET,\n    POST_DELETE_SUCCESS,\n    POST_DELETE_FAIL,\n    POST_ALL_SUCCESS,\n    POST_ALL_FAIL,\n    POST_DETAIL_SUCCESS,\n    POST_DETAIL_FAIL,\n    POST_DETAIL_RESET,\n    MY_POSTS_SUCCESS,\n    MY_POSTS_FAIL,\n    MY_POSTS_RESET,\n    POST_COMMENT_SUCCESS,\n    POST_COMMENT_FAIL,\n    POST_COMMENT_RESET\n} from '../constants/postConstants';\n\nexport const postCreateReducer = (state = {}, action) => {\n    switch (action.type) {\n        case POST_CREATE_SUCCESS:\n            return {\n                success: true,\n                post: action.payload\n            };\n        case POST_CREATE_FAIL:\n            return {\n                error: action.payload\n            };\n        case POST_CREATE_RESET:\n            return {}\n        default:\n            return state;\n    }\n}\n\nexport const postUpdateReducer = (state = { post: {} }, action) => {\n    switch (action.type) {\n        case POST_UPDATE_SUCCESS:\n            return {\n                success: true\n            };\n        case POST_UPDATE_FAIL:\n            return {\n                error: action.payload\n            };\n        case POST_UPDATE_RESET:\n            return {\n                post: {}\n            }\n        default:\n            return state;\n    }\n}\n\nexport const postDeleteReducer = (state = {}, action) => {\n    switch (action.type) {\n        case POST_DELETE_SUCCESS:\n            return {\n                success: true\n            };\n        case POST_DELETE_FAIL:\n            return {\n                error: action.payload\n            };\n        default:\n            return state;\n    }\n}\n\nexport const postAllReducer = (state = { posts: [] }, action) => {\n    switch (action.type) {\n        case POST_ALL_SUCCESS:\n            return {\n                posts: action.payload.posts,\n                page: action.payload.page,\n                pages: action.payload.pages\n            };\n        case POST_ALL_FAIL:\n            return {\n                error: action.payload\n            };\n        default:\n            return state;\n    }\n}\n\nexport const postDetailReducer = (state = { post: { comments: [] } }, action) => {\n    switch (action.type) {\n        case POST_DETAIL_SUCCESS:\n            return {\n                post: action.payload\n            };\n        case POST_DETAIL_FAIL:\n            return {\n                error: action.payload\n            };\n        case POST_DETAIL_RESET:\n            return {\n                post: { comments: [] }\n            }\n        default:\n            return state;\n    }\n}\n\nexport const myPostsReducer = (state = { posts: [] }, action) => {\n    switch (action.type) {\n        case MY_POSTS_SUCCESS:\n            return {\n                posts: action.payload\n            };\n        case MY_POSTS_FAIL:\n            return {\n                error: action.payload\n            };\n        case MY_POSTS_RESET:\n            return {\n                posts: []\n            }\n        default:\n            return state;\n    }\n}\n\nexport const postCommentReducer = (state = {}, action) => {\n    switch (action.type) {\n        case POST_COMMENT_SUCCESS:\n            return {\n                success: true\n            };\n        case POST_COMMENT_FAIL:\n            return {\n                error: action.payload\n            };\n        case POST_COMMENT_RESET:\n            return {}\n        default:\n            return state;\n    }\n}","import axios from 'axios';\nimport {\n    LOGIN_SUCCESS,\n    LOGIN_FAIL,\n    REGISTER_SUCCESS,\n    REGISTER_FAIL,\n    LOGOUT,\n    USER_PROFILE_SUCCESS,\n    USER_PROFILE_FAIL,\n    USER_PROFILE_RESET,\n    USER_UPDATE_PROFILE_SUCCESS,\n    USER_UPDATE_PROFILE_FAIL,\n    USER_CHANGE_PASSWORD_SUCCESS,\n    USER_CHANGE_PASSWORD_FAIL,\n    USER_BACKGROUND_SUCCESS,\n    USER_BACKGROUND_FAIL,\n    USER_BACKGROUND_RESET,\n    USER_UPDATE_BACKGROUND_SUCCESS,\n    USER_UPDATE_BACKGROUND_FAIL\n} from '../constants/userConstants';\nimport { MY_ADMISSIONS_RESET } from '../constants/admissionConstants';\nimport { MY_POSTS_RESET } from '../constants/postConstants';\n\nexport const login = (email, password) => async (dispatch) => {\n    try {\n        const config = {\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }\n        const { data } = await axios.post('/api/users/login', { email, password }, config);\n        dispatch({\n            type: LOGIN_SUCCESS,\n            payload: data\n        })\n        localStorage.setItem('userInfo', JSON.stringify(data));\n    } catch (error) {\n        dispatch({\n            type: LOGIN_FAIL,\n            payload: error.response.data.message\n        })\n    }\n}\n\nexport const register = (username, email, password) => async (dispatch) => {\n    try {\n        const config = {\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }\n        const { data } = await axios.post('/api/users/register', { username, email, password }, config);\n        dispatch({\n            type: REGISTER_SUCCESS,\n            payload: data\n        })\n        dispatch({\n            type: LOGIN_SUCCESS,\n            payload: data\n        })\n        localStorage.setItem('userInfo', JSON.stringify(data));\n    } catch (error) {\n        dispatch({\n            type: REGISTER_FAIL,\n            payload: error.response.data.message\n        })\n    }\n}\n\nexport const logout = () => async (dispatch) => {\n    localStorage.removeItem('userInfo');\n    dispatch({\n        type: LOGOUT\n    })\n    dispatch({\n        type: USER_PROFILE_RESET\n    })\n    dispatch({\n        type: USER_BACKGROUND_RESET\n    })\n    dispatch({\n        type: MY_ADMISSIONS_RESET\n    })\n    dispatch({\n        type: MY_POSTS_RESET\n    })\n    document.location.href = '/login';\n}\n\nexport const getProfile = () => async (dispatch, getState) => {\n    try {\n        const { login: { userInfo } } = getState();\n        const config = {\n            headers: {\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        }\n        const { data } = await axios.get('/api/users/profile', config);\n        dispatch({\n            type: USER_PROFILE_SUCCESS,\n            payload: data\n        })\n    } catch (error) {\n        dispatch({\n            type: USER_PROFILE_FAIL,\n            payload: error.response.data.message\n        })\n    }\n}\n\nexport const updateProfile = (user) => async (dispatch, getState) => {\n    try {\n        const { login: { userInfo } } = getState();\n        const config = {\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        }\n        const { data } = await axios.put('/api/users/profile', user, config);\n        dispatch({\n            type: USER_UPDATE_PROFILE_SUCCESS,\n            payload: data\n        })\n        dispatch({\n            type: LOGIN_SUCCESS,\n            payload: data\n        })\n        localStorage.setItem('userInfo', JSON.stringify(data));\n    } catch (error) {\n        dispatch({\n            type: USER_UPDATE_PROFILE_FAIL,\n            payload: error.response.data.message\n        })\n    }\n}\n\nexport const changePassword = (user) => async (dispatch, getState) => {\n    try {\n        const { login: { userInfo } } = getState();\n        const config = {\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        }\n        const { data } = await axios.put('/api/users/changepassword', user, config);\n        dispatch({\n            type: USER_CHANGE_PASSWORD_SUCCESS,\n            payload: data\n        })\n    } catch (error) {\n        dispatch({\n            type: USER_CHANGE_PASSWORD_FAIL,\n            payload: error.response.data.message\n        })\n    }\n}\n\nexport const getBackground = () => async (dispatch, getState) => {\n    try {\n        const { login: { userInfo } } = getState();\n        const config = {\n            headers: {\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        }\n        const { data } = await axios.get('/api/users/background', config);\n        dispatch({\n            type: USER_BACKGROUND_SUCCESS,\n            payload: data\n        })\n    } catch (error) {\n        dispatch({\n            type: USER_BACKGROUND_FAIL,\n            payload: error.response.data.message\n        })\n    }\n}\n\nexport const updateBackground = (user) => async (dispatch, getState) => {\n    try {\n        const { login: { userInfo } } = getState();\n        const config = {\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        }\n        const { data } = await axios.put('/api/users/background', user, config);\n        dispatch({\n            type: USER_UPDATE_BACKGROUND_SUCCESS,\n            payload: data\n        })\n    } catch (error) {\n        dispatch({\n            type: USER_UPDATE_BACKGROUND_FAIL,\n            payload: error.response.data.message\n        })\n    }\n}","import React from 'react';\nimport { Container, Navbar, Nav, NavDropdown } from 'react-bootstrap';\nimport { LinkContainer } from 'react-router-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { logout } from '../actions/userAction';\n\nconst Header = () => {\n    const dispatch = useDispatch();\n\n    const { userInfo } = useSelector(state => state.login);\n\n    const logoutHandler = () => {\n        dispatch(logout());\n    }\n\n    return (\n        <header>\n            <Navbar bg=\"primary\" variant=\"dark\" expand=\"lg\" collapseOnSelect>\n                <Container>\n                    <LinkContainer to=\"/\">\n                        <Navbar.Brand>College Admission</Navbar.Brand>\n                    </LinkContainer>\n                    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                    <Navbar.Collapse id=\"basic-navbar-nav\">\n                        <Nav className=\"me-auto\">\n                            <LinkContainer to=\"/colleges\">\n                                <Nav.Link> Colleges </Nav.Link>\n                            </LinkContainer>\n                            <LinkContainer to=\"/admissions\">\n                                <Nav.Link> Admissions </Nav.Link>\n                            </LinkContainer>\n                            <LinkContainer to=\"/forums\">\n                                <Nav.Link> Forums </Nav.Link>\n                            </LinkContainer>\n                            {userInfo &&\n                                <LinkContainer to=\"/calculator\">\n                                    <Nav.Link> Calculator </Nav.Link>\n                                </LinkContainer>\n                            }\n                        </Nav>\n                        <Nav className=\"ms-auto\">\n                            {userInfo ? (\n                                <NavDropdown title={userInfo.username} id=\"username\">\n                                    <LinkContainer to=\"/profile\">\n                                        <NavDropdown.Item>My Profile</NavDropdown.Item>\n                                    </LinkContainer>\n                                    <LinkContainer to=\"/background\">\n                                        <NavDropdown.Item>My Background</NavDropdown.Item>\n                                    </LinkContainer>\n                                    <LinkContainer to=\"/myadmissions\">\n                                        <NavDropdown.Item>My Admissions</NavDropdown.Item>\n                                    </LinkContainer>\n                                    <LinkContainer to=\"/myposts\">\n                                        <NavDropdown.Item>My Posts</NavDropdown.Item>\n                                    </LinkContainer>\n                                    <LinkContainer to=\"/\">\n                                        <NavDropdown.Item onClick={logoutHandler}>Logout</NavDropdown.Item>\n                                    </LinkContainer>\n                                </NavDropdown>\n                            ) : (\n                                <LinkContainer to=\"/login\">\n                                    <Nav.Link><i className=\"fas fa-user\" /> Log In </Nav.Link>\n                                </LinkContainer>\n                            )}\n                        </Nav>\n                    </Navbar.Collapse>\n                </Container>\n            </Navbar>\n        </header>\n    )\n}\n\nexport default Header;","import React from 'react';\nimport { Container, Row, Col } from 'react-bootstrap';\n\nconst Footer = () => {\n    return (\n        <footer>\n            <Container>\n                <Row>\n                    <Col className=\"text-center py-3\">\n                        Copyright &copy; College Admission\n                    </Col>\n                </Row>\n            </Container>\n        </footer>\n    )\n}\n\nexport default Footer;","import React from 'react';\nimport { Carousel, Image } from 'react-bootstrap';\n\nconst HomeCarousel = () => {\n    return (\n        <div className=\"text-center\">\n            <h3>Explore College Admission Website And Find The Best Schools For You</h3>\n            <Carousel pause=\"hover\" className=\"bg-transparent\">\n                <Carousel.Item key=\"home1\">\n                    <Image src=\"images/home1.jpeg\" fluid />\n                </Carousel.Item>\n                <Carousel.Item key=\"home2\">\n                    <Image src=\"images/home2.jpeg\" fluid />\n                </Carousel.Item>\n                <Carousel.Item key=\"home3\">\n                    <Image src=\"images/home3.jpeg\" fluid />\n                </Carousel.Item>\n                <Carousel.Item key=\"home4\">\n                    <Image src=\"images/home4.jpeg\" fluid />\n                </Carousel.Item>\n            </Carousel>\n        </div>\n    )\n}\n\nexport default HomeCarousel;\n","import React from 'react';\nimport HomeCarousel from '../components/HomeCarousel';\n\nconst HomeScreen = () => {\n    return (\n        <div>\n            <HomeCarousel />\n        </div>\n    )\n}\n\nexport default HomeScreen;","import React from 'react';\nimport { Container, Row, Col } from 'react-bootstrap';\n\nconst FormContainer = ({ children }) => {\n    return (\n        <Container>\n            <Row className=\"justify-content-md-center\">\n                <Col xs={12} md={6}>\n                    {children}\n                </Col>\n            </Row>\n        </Container>\n    )\n}\n\nexport default FormContainer;","import React from 'react';\nimport { Alert } from 'react-bootstrap';\n\nconst Message = ({ variant, children }) => {\n    return (\n        <Alert variant={variant}>\n            {children}\n        </Alert>\n    )\n}\n\nexport default Message;","import React, { useState, useEffect } from 'react';\nimport { Card, Row, Col, Form, Button } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { login } from '../actions/userAction';\nimport FormContainer from '../components/FormContainer';\nimport Message from '../components/Message';\n\nconst LoginScreen = ({ location, history }) => {\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n\n    const dispatch = useDispatch();\n\n    const { userInfo, error } = useSelector(state => state.login);\n\n    const redirect = location.search ? location.search.split('=')[1] : '';\n\n    useEffect(() => {\n        if (userInfo) {\n            history.push(redirect)\n        }\n    }, [userInfo, history, redirect])\n\n    const submitHandler = (e) => {\n        e.preventDefault();\n        dispatch(login(email, password));\n    }\n\n    return (\n        <FormContainer>\n            <h1 className=\"text-center\">Log In</h1>\n            {error && <Message variant=\"danger\">{error}</Message>}\n            <Card className=\"card\" border=\"primary\" >\n                <Card.Img className=\"card-img\" variant=\"top\" src=\"/images/login.jpg\" />\n                <Card.Body>\n                    <Form onSubmit={submitHandler}>\n                        <Form.Group controlId=\"email\">\n                            <Form.Label>Email</Form.Label>\n                            <Form.Control\n                                type=\"email\"\n                                placeholder=\"Enter email\"\n                                value={email}\n                                onChange={e => setEmail(e.target.value)}\n                            />\n                        </Form.Group>\n                        <Form.Group controlId=\"password\" className=\"py-3\">\n                            <Form.Label>Password</Form.Label>\n                            <Form.Control\n                                type=\"password\"\n                                placeholder=\"Enter password\"\n                                value={password}\n                                onChange={e => setPassword(e.target.value)}\n                            />\n                        </Form.Group>\n                        <div className=\"d-grid gap-2\">\n                            <Button type=\"submit\" variant=\"primary\">\n                                Log In\n                            </Button>\n                        </div>\n                    </Form>\n                </Card.Body>\n            </Card>\n            <Row className=\"py-3 text-center\">\n                <Col>\n                    New User? <Link to={redirect ? `/register?redirect=${redirect}` : '/register'}>Register</Link>\n                </Col>\n            </Row>\n        </FormContainer>\n    )\n}\n\nexport default LoginScreen;","import React, { useState, useEffect } from 'react';\nimport { Card, Row, Col, Form, Button } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { register } from '../actions/userAction';\nimport FormContainer from '../components/FormContainer';\nimport Message from '../components/Message';\n\nconst RegisterScreen = ({ location, history }) => {\n    const [username, setUsername] = useState('');\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n    const [confirmPassword, setConfirmPassword] = useState('');\n    const [validated, setValidated] = useState(false);\n    const [message, setMessage] = useState('');\n\n    const dispatch = useDispatch();\n\n    const { userInfo, error } = useSelector(state => state.register);\n\n    const redirect = location.search ? location.search.split('=')[1] : '';\n\n    useEffect(() => {\n        if (userInfo) {\n            history.push(redirect)\n        }\n    }, [userInfo, history, redirect])\n\n    const submitHandler = (e) => {\n        e.preventDefault();\n        const form = e.currentTarget;\n        if (form.checkValidity() === true) {\n            if (password !== confirmPassword) {\n                setMessage('Passwords do not match');\n            } else {\n                dispatch(register(username, email, password));\n            }\n        }\n        setValidated(true);\n    }\n\n    return (\n        <FormContainer>\n            <h1 className=\"text-center\">Register</h1>\n            {message && <Message variant=\"danger\">{message}</Message>}\n            {error && <Message variant=\"danger\">{error}</Message>}\n            <Card className=\"card\" border=\"primary\" >\n                <Card.Img className=\"card-img\" variant=\"top\" src=\"/images/login.jpg\" />\n                <Card.Body>\n                    <Form noValidate validated={validated} onSubmit={submitHandler}>\n                        <Form.Group controlId=\"username\">\n                            <Form.Label>Username</Form.Label>\n                            <Form.Control\n                                type=\"text\"\n                                placeholder=\"Enter username\"\n                                value={username}\n                                onChange={e => setUsername(e.target.value)}\n                                required\n                            />\n                            <Form.Control.Feedback type=\"invalid\">\n                                Username required.\n                            </Form.Control.Feedback>\n                        </Form.Group>\n                        <Form.Group controlId=\"email\" className=\"py-3\">\n                            <Form.Label>Email</Form.Label>\n                            <Form.Control\n                                type=\"email\"\n                                placeholder=\"Enter email\"\n                                value={email}\n                                onChange={e => setEmail(e.target.value)}\n                                required\n                            />\n                            <Form.Control.Feedback type=\"invalid\">\n                                Email required.\n                            </Form.Control.Feedback>\n                        </Form.Group>\n                        <Form.Group controlId=\"password\">\n                            <Form.Label>Password</Form.Label>\n                            <Form.Control\n                                type=\"password\"\n                                placeholder=\"Enter password\"\n                                value={password}\n                                onChange={e => setPassword(e.target.value)}\n                                required\n                            />\n                            <Form.Control.Feedback type=\"invalid\">\n                                Password required.\n                            </Form.Control.Feedback>\n                        </Form.Group>\n                        <Form.Group controlId=\"confirmPassword\" className=\"py-3\">\n                            <Form.Label>Confirm Password</Form.Label>\n                            <Form.Control\n                                type=\"password\"\n                                placeholder=\"Confirm password\"\n                                value={confirmPassword}\n                                onChange={e => setConfirmPassword(e.target.value)}\n                                required\n                            />\n                            <Form.Control.Feedback type=\"invalid\">\n                                Confirm password required.\n                            </Form.Control.Feedback>\n                        </Form.Group>\n                        <div className=\"d-grid gap-2\">\n                            <Button type=\"submit\" variant=\"primary\">\n                                Register\n                            </Button>\n                        </div>\n                    </Form>\n                </Card.Body>\n            </Card>\n            <Row className=\"py-3 text-center\">\n                <Col>\n                    Already Have an Account? <Link to={redirect ? `/login?redirect=${redirect}` : '/login'}>Log In</Link>\n                </Col>\n            </Row>\n        </FormContainer>\n    )\n}\n\nexport default RegisterScreen;","import React, { useState, useEffect } from 'react';\nimport { Card, Row, Col, Button, Form } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link } from 'react-router-dom'\nimport { getProfile, updateProfile } from '../actions/userAction';\nimport FormContainer from '../components/FormContainer';\nimport Message from '../components/Message';\nimport { USER_UPDATE_PROFILE_RESET } from '../constants/userConstants';\n\nconst ProfileScreen = ({ history }) => {\n    const [username, setUsername] = useState('');\n    const [email, setEmail] = useState('');\n    const [gender, setGender] = useState('');\n    const [location, setLocation] = useState('');\n    const [message, setMessage] = useState(null);\n    const [update, setUpdate] = useState(false);\n\n    const dispatch = useDispatch();\n\n    const { userInfo } = useSelector(state => state.login);\n\n    const { user, error } = useSelector(state => state.userProfile);\n\n    const { success } = useSelector(state => state.userUpdateProfile);\n\n    useEffect(() => {\n        if (!userInfo) {\n            history.push('/login')\n        } else {\n            if (!user || !user.username || success) {\n                dispatch({ type: USER_UPDATE_PROFILE_RESET })\n                dispatch(getProfile())\n            } else {\n                setUsername(user.username)\n                setEmail(user.email)\n                setGender(user.gender)\n                setLocation(user.location)\n            }\n        }\n    }, [dispatch, history, userInfo, user, success])\n\n    const submitHandler = (e) => {\n        e.preventDefault()\n        if (username.length === 0) {\n            setMessage(\"Username cannot be empty\")\n        } else {\n            dispatch(updateProfile({ id: user._id, username, email, gender, location }))\n            setUpdate(true)\n        }\n    };\n\n    return (\n        <FormContainer>\n            <h2 className=\"text-center py-3\">Update Profile</h2>\n            {error && <Message variant='danger'>{error}</Message>}\n            {message && <Message variant=\"danger\">{message}</Message>}\n            {update && <Message variant=\"success\">Profile Updated</Message>}\n            <Card className=\"card\" border=\"primary\" >\n                <Card.Body>\n                    <Form onSubmit={submitHandler}>\n                        <Form.Group controlId=\"username\">\n                            <Form.Label>Username</Form.Label>\n                            <Form.Control\n                                type=\"text\"\n                                placeholder=\"Enter username\"\n                                value={username}\n                                onChange={e => setUsername(e.target.value)}\n                            />\n                        </Form.Group>\n                        <Form.Group controlId=\"email\" className=\"py-3\">\n                            <Form.Label>Email</Form.Label>\n                            <Form.Control\n                                type=\"email\"\n                                placeholder={email}\n                                disabled\n                            />\n                        </Form.Group>\n                        <Form.Group controlId=\"gender\">\n                            <Form.Label>Gender</Form.Label>\n                            <Form.Control\n                                as=\"select\"\n                                className=\"form-select rounded\"\n                                value={gender || ''}\n                                onChange={e => setGender(e.target.value)}\n                            >\n                                <option>Choose...</option>\n                                <option value=\"male\">Male</option>\n                                <option value=\"female\">Female</option>\n                                <option value=\"other\">Other</option>\n                            </Form.Control>\n                        </Form.Group>\n                        <Form.Group controlId=\"location\" className=\"py-3\">\n                            <Form.Label>Location</Form.Label>\n                            <Form.Control\n                                type=\"text\"\n                                placeholder=\"Enter location\"\n                                value={location || ''}\n                                onChange={e => setLocation(e.target.value)}\n                            />\n                        </Form.Group>\n                        <div className=\"d-grid gap-2\">\n                            <Button type=\"submit\" variant=\"primary\">\n                                Update\n                            </Button>\n                        </div>\n                    </Form>\n                </Card.Body>\n            </Card>\n            <Row className=\"py-3 text-center\">\n                <Col>\n                    <Link to='/changepassword'>Change Password</Link>\n                </Col>\n            </Row>\n        </FormContainer>\n    )\n}\n\nexport default ProfileScreen;","import React, { useState, useEffect } from 'react';\nimport { Card, Row, Col, Button, Form } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link } from 'react-router-dom'\nimport { changePassword, logout } from '../actions/userAction';\nimport FormContainer from '../components/FormContainer';\nimport Message from '../components/Message';\n\nconst ChangePasswordScreen = ({ history }) => {\n    const [newPassword, setNewPassword] = useState('');\n    const [confirmPassword, setConfirmPassword] = useState('');\n    const [message, setMessage] = useState(null);\n    const [update, setUpdate] = useState(false);\n\n    const dispatch = useDispatch();\n\n    const { userInfo } = useSelector(state => state.login);\n\n    const { success } = useSelector(state => state.userUpdateProfile);\n\n    useEffect(() => {\n        if (!userInfo || success) {\n            history.push('/login')\n        }\n    }, [userInfo, history, success])\n\n    const submitHandler = (e) => {\n        e.preventDefault()\n        if (newPassword.length === 0) {\n            setMessage(\"New password cannot be empty\")\n        } else if (confirmPassword !== newPassword) {\n            setMessage(\"Passwords do not match\")\n        } else {\n            dispatch(changePassword({ id: userInfo._id, newPassword }))\n            setUpdate(true)\n            setTimeout(() => {\n                dispatch(logout())\n            }, 1500)\n        }\n    };\n\n    return (\n        <FormContainer>\n            <h2 className=\"text-center py-3\">Change Password</h2>\n            {message && <Message variant=\"danger\">{message}</Message>}\n            {update && <Message variant=\"success\">Password Changed</Message>}\n            <Card className=\"card\" border=\"primary\" >\n                <Card.Body>\n                    <Form onSubmit={submitHandler}>\n                        <Form.Group controlId=\"newPassword\">\n                            <Form.Label>New Password</Form.Label>\n                            <Form.Control\n                                type=\"password\"\n                                placeholder=\"Enter new password\"\n                                value={newPassword}\n                                onChange={e => setNewPassword(e.target.value)}\n                            />\n                        </Form.Group>\n                        <Form.Group controlId=\"confirmPassword\" className=\"py-3\">\n                            <Form.Label>Confirm Password</Form.Label>\n                            <Form.Control\n                                type=\"password\"\n                                placeholder=\"Enter new password again\"\n                                value={confirmPassword}\n                                onChange={e => setConfirmPassword(e.target.value)}\n                            />\n                        </Form.Group>\n                        <div className=\"d-grid gap-2\">\n                            <Button type=\"submit\" variant=\"primary\">\n                                Change Password\n                            </Button>\n                        </div>\n                    </Form>\n                </Card.Body>\n            </Card>\n            <Row className=\"py-3 text-center\">\n                <Col>\n                    <Link to='/profile'>Back To Profile</Link>\n                </Col>\n            </Row>\n        </FormContainer>\n    )\n}\n\nexport default ChangePasswordScreen;","import React, { useState, useEffect } from 'react';\nimport { Card, Row, Col, Button, Form } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getBackground, updateBackground } from '../actions/userAction';\nimport FormContainer from '../components/FormContainer';\nimport Message from '../components/Message';\nimport { USER_UPDATE_BACKGROUND_RESET } from '../constants/userConstants';\n\nconst BackgroundScreen = ({ history }) => {\n    const [school, setSchool] = useState('');\n    const [schoolLevel, setSchoolLevel] = useState('');\n    const [major, setMajor] = useState('');\n    const [gpa, setGpa] = useState('');\n    const [langTest, setLangTest] = useState('');\n    const [langScore, setLangScore] = useState('');\n    const [genTest, setGenTest] = useState('');\n    const [genScore, setGenScore] = useState('');\n    const [workLevel, setWorkLevel] = useState('');\n    const [workYears, setWorkYears] = useState('');\n    const [researchExp, setResearchExp] = useState('');\n    const [competitionExp, setCompetitionExp] = useState('');\n    const [otherInfo, setOtherInfo] = useState('');\n    const [update, setUpdate] = useState(false);\n\n    const dispatch = useDispatch();\n\n    const { userInfo } = useSelector(state => state.login);\n\n    const { user, error } = useSelector(state => state.userBackground);\n\n    const { success } = useSelector(state => state.userUpdateBackground);\n\n    useEffect(() => {\n        if (!userInfo) {\n            history.push('/login')\n        } else {\n            if (!user || !user.school || success) {\n                dispatch({ type: USER_UPDATE_BACKGROUND_RESET })\n                dispatch(getBackground())\n            } else {\n                setSchool(user.school);\n                setSchoolLevel(user.schoolLevel);\n                setMajor(user.major);\n                setGpa(user.gpa);\n                setLangTest(user.langTest);\n                setLangScore(user.langScore);\n                setGenTest(user.genTest);\n                setGenScore(user.genScore);\n                setWorkLevel(user.workLevel);\n                setWorkYears(user.workYears);\n                setResearchExp(user.researchExp);\n                setCompetitionExp(user.competitionExp);\n                setOtherInfo(user.otherInfo);\n            }\n        }\n    }, [dispatch, history, userInfo, user, success])\n\n    const submitHandler = (e) => {\n        e.preventDefault()\n        dispatch(updateBackground({\n            id: user._id,\n            school,\n            schoolLevel,\n            major,\n            gpa,\n            langTest,\n            langScore,\n            genTest,\n            genScore,\n            workLevel,\n            workYears,\n            researchExp,\n            competitionExp,\n            otherInfo\n        }))\n        setUpdate(true)\n    };\n\n    return (\n        <FormContainer>\n            <h2 className=\"text-center py-3\">Update Academic Background Info</h2>\n            {error && <Message variant='danger'>{error}</Message>}\n            {update && <Message variant=\"success\">Profile Updated</Message>}\n            <Card className=\"card\" border=\"primary\" >\n                <Card.Body>\n                    <Form onSubmit={submitHandler}>\n                        <Form.Group controlId=\"school\">\n                            <Form.Label>School Name</Form.Label>\n                            <Form.Control\n                                type=\"text\"\n                                placeholder=\"Enter school name\"\n                                value={school || ''}\n                                onChange={e => setSchool(e.target.value)}\n                            />\n                        </Form.Group>\n                        <Form.Group controlId=\"schoolLevel\" className=\"py-3\">\n                            <Form.Label>School Level</Form.Label>\n                            <Form.Control\n                                as=\"select\"\n                                className=\"form-select rounded\"\n                                value={schoolLevel || ''}\n                                onChange={e => setSchoolLevel(e.target.value)}\n                            >\n                                <option value=\"\">Choose...</option>\n                                <option value=\"High School\">High School</option>\n                                <option value=\"Undergraduate\">Undergraduate</option>\n                                <option value=\"Graduate\">Graduate</option>\n                            </Form.Control>\n                        </Form.Group>\n                        <Form.Group controlId=\"major\">\n                            <Form.Label>Major</Form.Label>\n                            <Form.Control\n                                type=\"text\"\n                                placeholder=\"Enter major\"\n                                value={major || ''}\n                                onChange={e => setMajor(e.target.value)}\n                            />\n                        </Form.Group>\n                        <Form.Group controlId=\"gpa\" className=\"py-3\">\n                            <Form.Label>GPA</Form.Label>\n                            <Form.Control\n                                type=\"number\"\n                                placeholder=\"Enter GPA\"\n                                value={gpa || ''}\n                                max=\"4\"\n                                onChange={e => setGpa(e.target.value)}\n                            />\n                        </Form.Group>\n                        <Row>\n                            <Col>\n                                <Form.Group controlId=\"langTest\">\n                                    <Form.Label>Language Test</Form.Label>\n                                    <Form.Control\n                                        as=\"select\"\n                                        className=\"form-select rounded\"\n                                        value={langTest || ''}\n                                        onChange={e => setLangTest(e.target.value)}\n                                    >\n                                        <option value=\"\">Choose...</option>\n                                        <option value=\"TOEFL\">TOEFL</option>\n                                        <option value=\"IELTS\">IELTS</option>\n                                    </Form.Control>\n                                </Form.Group>\n                            </Col>\n                            <Col>\n                                <Form.Group controlId=\"langScore\">\n                                    <Form.Label>Score</Form.Label>\n                                    <Form.Control\n                                        type=\"number\"\n                                        placeholder=\"Enter language test score\"\n                                        value={langScore || ''}\n                                        max=\"120\"\n                                        onChange={e => setLangScore(e.target.value)}\n                                    />\n                                </Form.Group>\n                            </Col>\n                        </Row>\n                        <Row className=\"py-3\">\n                            <Col>\n                                <Form.Group controlId=\"genTest\">\n                                    <Form.Label>General Test</Form.Label>\n                                    <Form.Control\n                                        as=\"select\"\n                                        className=\"form-select rounded\"\n                                        value={genTest || ''}\n                                        onChange={e => setGenTest(e.target.value)}\n                                    >\n                                        <option value=\"\">Choose...</option>\n                                        <option value=\"GRE\">GRE</option>\n                                        <option value=\"GMAT\">GMAT</option>\n                                    </Form.Control>\n                                </Form.Group>\n                            </Col>\n                            <Col>\n                                <Form.Group controlId=\"genScore\">\n                                    <Form.Label>Score</Form.Label>\n                                    <Form.Control\n                                        type=\"number\"\n                                        placeholder=\"Enter general test score\"\n                                        value={genScore || ''}\n                                        max=\"340\"\n                                        onChange={e => setGenScore(e.target.value)}\n                                    />\n                                </Form.Group>\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col>\n                                <Form.Group controlId=\"workLevel\">\n                                    <Form.Label>Work Experience</Form.Label>\n                                    <Form.Control\n                                        as=\"select\"\n                                        className=\"form-select rounded\"\n                                        value={workLevel || ''}\n                                        onChange={e => setWorkLevel(e.target.value)}\n                                    >\n                                        <option value=\"\">Choose...</option>\n                                        <option value=\"Internship\">Internship</option>\n                                        <option value=\"Full-time\">Full-time</option>\n                                    </Form.Control>\n                                </Form.Group>\n                            </Col>\n                            <Col>\n                                <Form.Group controlId=\"workYears\">\n                                    <Form.Label>Years</Form.Label>\n                                    <Form.Control\n                                        as=\"select\"\n                                        className=\"form-select rounded\"\n                                        value={workYears || ''}\n                                        onChange={e => setWorkYears(e.target.value)}\n                                    >\n                                        <option value=\"\">Choose...</option>\n                                        <option value=\"0-3 months\">0-3 months</option>\n                                        <option value=\"3-5 months\">3-5 months</option>\n                                        <option value=\"5-11 months\">5-11 months</option>\n                                        <option value=\"1-3 years\">1-3 years</option>\n                                        <option value=\"3-5 years\">3-5 years</option>\n                                        <option value=\"5+ years\">5+ years</option>\n                                    </Form.Control>\n                                </Form.Group>\n                            </Col>\n                        </Row>\n                        <Form.Group controlId=\"researchExp\" className=\"py-3\">\n                            <Form.Label>Research Experience</Form.Label>\n                            <Form.Control\n                                type=\"text\"\n                                placeholder=\"Enter research experience\"\n                                value={researchExp || ''}\n                                onChange={e => setResearchExp(e.target.value)}\n                            />\n                        </Form.Group>\n                        <Form.Group controlId=\"competitionExp\">\n                            <Form.Label>Competition Experience</Form.Label>\n                            <Form.Control\n                                type=\"text\"\n                                placeholder=\"Enter competition experience\"\n                                value={competitionExp || ''}\n                                onChange={e => setCompetitionExp(e.target.value)}\n                            />\n                        </Form.Group>\n                        <Form.Group controlId=\"otherInfo\" className=\"py-3\">\n                            <Form.Label>Other Info</Form.Label>\n                            <Form.Control\n                                as=\"textarea\"\n                                rows=\"3\"\n                                placeholder=\"Enter other background info\"\n                                value={otherInfo || ''}\n                                onChange={e => setOtherInfo(e.target.value)}\n                            />\n                        </Form.Group>\n                        <div className=\"d-grid gap-2\">\n                            <Button type=\"submit\" variant=\"primary\">\n                                Update\n                            </Button>\n                        </div>\n                    </Form>\n                </Card.Body>\n            </Card>\n        </FormContainer>\n    )\n}\n\nexport default BackgroundScreen;","import axios from 'axios';\nimport {\n    COLLEGE_LIST_SUCCESS,\n    COLLEGE_LIST_FAIL,\n    COLLEGE_DETAILS_SUCCESS,\n    COLLEGE_DETAILS_FAIL,\n    COLLEGE_BY_NAME_SUCCESS,\n    COLLEGE_BY_NAME_FAIL\n} from '../constants/collegeConstants';\n\nexport const getColleges = (keyword = \"\") => async (dispatch) => {\n    try {\n        const { data } = await axios.get(`/api/colleges?keyword=${keyword}`);\n        dispatch({\n            type: COLLEGE_LIST_SUCCESS,\n            payload: data\n        })\n    } catch (error) {\n        dispatch({\n            type: COLLEGE_LIST_FAIL,\n            payload: error.response.data.message\n        })\n    }\n}\n\nexport const getCollegeDetails = (id) => async (dispatch) => {\n    try {\n        const { data } = await axios.get(`/api/colleges/${id}`);\n        dispatch({\n            type: COLLEGE_DETAILS_SUCCESS,\n            payload: data\n        })\n    } catch (error) {\n        dispatch({\n            type: COLLEGE_DETAILS_FAIL,\n            payload: error.response.data.message\n        })\n    }\n}\n\nexport const getCollegeByName = (collegeName) => async (dispatch, getState) => {\n    try {\n        const { login: { userInfo } } = getState();\n        const config = {\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        }\n        const { data } = await axios.post('/api/colleges/name', collegeName, config);\n        dispatch({\n            type: COLLEGE_BY_NAME_SUCCESS,\n            payload: data\n        })\n    } catch (error) {\n        dispatch({\n            type: COLLEGE_BY_NAME_FAIL,\n            payload: error.response.data.message\n        })\n    }\n}","import React from 'react'\nimport { Card, Row, Col } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\n\nconst College = ({ college }) => {\n    return (\n        <Card className=\"mb-3 p-1 rounded\">\n            <Row>\n                <Col md={4}>\n                    <Link to={`/colleges/${college._id}`}>\n                        <Card.Img src={college.image} variant=\"top\" className=\"college-img\" />\n                    </Link>\n                </Col>\n                <Col md={8}>\n                    <Card.Body>\n                        <Link to={`/colleges/${college._id}`}>\n                            <Card.Title as=\"div\">\n                                <h4><strong>{college.name}</strong></h4>\n                            </Card.Title>\n                        </Link>\n                        <Card.Text as=\"div\" className=\"text-muted\">\n                            <strong>{college.location}</strong>\n                        </Card.Text>\n                        <Card.Text as=\"div\" className=\"py-2\">\n                            <strong>#{college.ranking}</strong> in <strong>National College Ranking</strong>\n                        </Card.Text>\n                        <Card.Text as=\"div\">\n                            {college.description}\n                        </Card.Text>\n                    </Card.Body>\n                </Col>\n            </Row>\n        </Card>\n    )\n}\n\nexport default College;","import React, { useState } from 'react';\nimport { Form, Button } from 'react-bootstrap';\nimport { withRouter } from 'react-router';\n\nconst Searchbar = ({ history, type }) => {\n    const [keyword, setKeyword] = useState('');\n\n    const submitHandler = (e) => {\n        e.preventDefault();\n        if (keyword.trim()) {\n            history.push(`/${type}/search/${keyword}`);\n        } else {\n            history.push(`/${type}`);\n        }\n    }\n\n    return (\n        <Form onSubmit={submitHandler} className=\"py-3 d-flex\">\n            <Form.Control\n                type=\"text\"\n                name=\"q\"\n                onChange={e => setKeyword(e.target.value)}\n                placeholder={`Search by keyword...`}\n                className=\"me-sm-2 rounded\"\n            />\n            <Button type=\"submit\" variant=\"outline-success\" className=\"rounded\">\n                Search\n            </Button>\n        </Form>\n    )\n}\n\nexport default withRouter(Searchbar);","import React, { useEffect } from 'react';\nimport { Row, Col } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getColleges } from '../actions/collegeAction';\nimport College from '../components/College';\nimport Message from '../components/Message';\nimport SearchBar from '../components/SearchBar';\n\nconst CollegeScreen = ({ match }) => {\n    const keyword = match.params.keyword;\n\n    const dispatch = useDispatch();\n\n    const { colleges, error } = useSelector(state => state.collegeList);\n\n    useEffect(() => {\n        dispatch(getColleges(keyword))\n    }, [dispatch, keyword])\n\n    return (\n        <>\n            {error ? (\n                <Message variant=\"danger\">{error}</Message >\n            ) : (\n                <>\n                    <Row className=\"mt-3 justify-content-md-center\">\n                        <Col md={7}>\n                            <h3>All Colleges</h3>\n                        </Col>\n                        <Col md={3}>\n                            <SearchBar type=\"colleges\" />\n                        </Col>\n                    </Row>\n                    <Row className=\"justify-content-md-center\">\n                        <Col md={10}>\n                            {colleges.map(college => (\n                                <College college={college} key={college._id} />\n                            ))}\n                        </Col>\n                    </Row>\n                </>\n            )}\n        </>\n    )\n}\n\nexport default CollegeScreen;","import React, { useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport mapboxgl from 'mapbox-gl';\n\nconst mapContainerStyle = {\n    width: \"100%\",\n    height: \"721px\",\n}\n\nconst Map = ({ lng, lat }) => {\n    const mapContainerRef = useRef(null);\n\n    useEffect(() => {\n        const getMapbox = async () => {\n            const { data: mapboxToken } = await axios.get('/api/config/mapboxToken');\n            const map = new mapboxgl.Map({\n                container: mapContainerRef.current,\n                accessToken: mapboxToken,\n                style: \"mapbox://styles/mapbox/streets-v11\",\n                center: [lng || -73.9856, lat || 40.7497],\n                zoom: 12,\n            });\n            map.addControl(new mapboxgl.NavigationControl(), \"top-right\");\n            new mapboxgl.Marker().setLngLat([lng || -73.9856, lat || 40.7497]).addTo(map);\n            return () => map.remove();\n        }\n        getMapbox();\n    }, [lng, lat])\n\n    return (\n        <div ref={mapContainerRef} style={mapContainerStyle} />\n    )\n}\n\nexport default Map;","import React, { useEffect } from 'react'\nimport { Row, Col, Image, ListGroup, Card } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getCollegeDetails } from '../actions/collegeAction';\nimport Map from '../components/Map';\nimport Message from '../components/Message';\n\nconst CollegeDetailScreen = ({ match }) => {\n    const collegeId = match.params.id;\n\n    const dispatch = useDispatch();\n\n    const { college, error } = useSelector(state => state.collegeDetails);\n\n    useEffect(() => {\n        dispatch(getCollegeDetails(collegeId))\n    }, [dispatch, collegeId])\n\n    return (\n        <>\n            <Link className=\"btn btn-primary my-3\" to=\"/colleges\">Go Back</Link>\n            {error ? (\n                <Message variant=\"danger\">{error}</Message>\n            ) : (\n                <Row>\n                    <Col md={6}>\n                        <Image src={college.image} className=\"college-img-lg\" />\n                        <Card className=\"my-3 px-1\">\n                            <Card.Body>\n                                <Card.Title as=\"div\">\n                                    <h4><strong>{college.name}</strong></h4>\n                                </Card.Title>\n                                <Card.Text as=\"div\">\n                                    {college.description}\n                                </Card.Text>\n                            </Card.Body>\n                            <ListGroup variant=\"flush\">\n                                <ListGroup.Item className=\"text-muted\">\n                                    {college.location}\n                                </ListGroup.Item>\n                                <ListGroup.Item>\n                                    National College Ranking: #{college.ranking}\n                                </ListGroup.Item>\n                                <ListGroup.Item>\n                                    <a href={college.website} target=\"_blank\" rel=\"noreferrer\">Visit School's Official Website</a>\n                                </ListGroup.Item>\n                                <ListGroup.Item>\n                                    Tuition: ${college.in_state_tuition} (in-state) ${college.out_of_state_tuition} (out-of-state)\n                                </ListGroup.Item>\n                            </ListGroup>\n                        </Card>\n                    </Col>\n                    <Col md={6}>\n                        <Map lng={college.longitude} lat={college.latitude} />\n                    </Col>\n                </Row>\n            )}\n        </>\n    )\n}\n\nexport default CollegeDetailScreen;","import axios from 'axios';\nimport {\n    ADMISSION_CREATE_SUCCESS,\n    ADMISSION_CREATE_FAIL,\n    ADMISSION_UPDATE_SUCCESS,\n    ADMISSION_UPDATE_FAIL,\n    ADMISSION_DELETE_SUCCESS,\n    ADMISSION_DELETE_FAIL,\n    ADMISSION_ALL_SUCCESS,\n    ADMISSION_ALL_FAIL,\n    ADMISSION_DETAIL_SUCCESS,\n    ADMISSION_DETAIL_FAIL,\n    MY_ADMISSIONS_SUCCESS,\n    MY_ADMISSIONS_FAIL,\n    ADMISSION_BACKGROUND_SUCCESS,\n    ADMISSION_BACKGROUND_FAIL,\n    ADMISSION_COMMENT_SUCCESS,\n    ADMISSION_COMMENT_FAIL,\n    ADMISSION_PERCENTAGE_SUCCESS,\n    ADMISSION_PERCENTAGE_FAIL\n} from '../constants/admissionConstants';\n\nexport const createAdmissionResult = (admission) => async (dispatch, getState) => {\n    try {\n        const { login: { userInfo } } = getState();\n        const config = {\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        }\n        const { data } = await axios.post('/api/admissions', admission, config);\n        dispatch({\n            type: ADMISSION_CREATE_SUCCESS,\n            payload: data\n        })\n    } catch (error) {\n        dispatch({\n            type: ADMISSION_CREATE_FAIL,\n            payload: error.response.data.message\n        })\n    }\n}\n\nexport const updateAdmissionResult = (admission) => async (dispatch, getState) => {\n    try {\n        const { login: { userInfo } } = getState();\n        const config = {\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        }\n        const { data } = await axios.put(`/api/admissions/${admission._id}`, admission, config);\n        dispatch({\n            type: ADMISSION_UPDATE_SUCCESS,\n        })\n        dispatch({\n            type: ADMISSION_DETAIL_SUCCESS,\n            payload: data\n        })\n    } catch (error) {\n        dispatch({\n            type: ADMISSION_UPDATE_FAIL,\n            payload: error.response.data.message\n        })\n    }\n}\n\nexport const deleteAdmissionResult = (id) => async (dispatch, getState) => {\n    try {\n        const { login: { userInfo } } = getState();\n        const config = {\n            headers: {\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        }\n        await axios.delete(`/api/admissions/${id}`, config);\n        dispatch({\n            type: ADMISSION_DELETE_SUCCESS,\n        })\n    } catch (error) {\n        dispatch({\n            type: ADMISSION_DELETE_FAIL,\n            payload: error.response.data.message\n        })\n    }\n}\n\nexport const getAllAdmissions = (keyword = \"\", pageNum = \"\") => async (dispatch) => {\n    try {\n        const { data } = await axios.get(`/api/admissions?keyword=${keyword}&pageNum=${pageNum}`);\n        dispatch({\n            type: ADMISSION_ALL_SUCCESS,\n            payload: data\n        })\n    } catch (error) {\n        dispatch({\n            type: ADMISSION_ALL_FAIL,\n            payload: error.response.data.message\n        })\n    }\n}\n\nexport const getAdmissionDetail = (id) => async (dispatch) => {\n    try {\n        const { data } = await axios.get(`/api/admissions/${id}`);\n        dispatch({\n            type: ADMISSION_DETAIL_SUCCESS,\n            payload: data\n        })\n    } catch (error) {\n        dispatch({\n            type: ADMISSION_DETAIL_FAIL,\n            payload: error.response.data.message\n        })\n    }\n}\n\nexport const getMyAdmissions = () => async (dispatch, getState) => {\n    try {\n        const { login: { userInfo } } = getState();\n        const config = {\n            headers: {\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        }\n        const { data } = await axios.get('/api/admissions/myadmissions', config);\n        dispatch({\n            type: MY_ADMISSIONS_SUCCESS,\n            payload: data\n        })\n    } catch (error) {\n        dispatch({\n            type: MY_ADMISSIONS_FAIL,\n            payload: error.response.data.message\n        })\n    }\n}\n\nexport const getAdmissionBackground = (id) => async (dispatch) => {\n    try {\n        const { data } = await axios.get(`/api/users/admissionBackground/${id}`);\n        dispatch({\n            type: ADMISSION_BACKGROUND_SUCCESS,\n            payload: data\n        })\n    } catch (error) {\n        dispatch({\n            type: ADMISSION_BACKGROUND_FAIL,\n            payload: error.response.data.message\n        })\n    }\n}\n\nexport const addComment = (id, comment) => async (dispatch, getState) => {\n    try {\n        const { login: { userInfo } } = getState();\n        const config = {\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        }\n        const { data } = await axios.post(`/api/admissions/${id}/comments`, comment, config);\n        dispatch({\n            type: ADMISSION_COMMENT_SUCCESS,\n            payload: data\n        })\n    } catch (error) {\n        dispatch({\n            type: ADMISSION_COMMENT_FAIL,\n            payload: error.response.data.message\n        })\n    }\n}\n\nexport const getAdmissionPercentage = (collegeName) => async (dispatch, getState) => {\n    try {\n        const { login: { userInfo } } = getState();\n        const config = {\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        }\n        const { data } = await axios.post('/api/admissions/percentage', collegeName, config);\n        dispatch({\n            type: ADMISSION_PERCENTAGE_SUCCESS,\n            payload: data\n        })\n    } catch (error) {\n        dispatch({\n            type: ADMISSION_PERCENTAGE_FAIL,\n            payload: error.response.data.message\n        })\n    }\n}","import React from 'react'\nimport { Card, Row, Col } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\n\nconst Admission = ({ admission }) => {\n    const dateArray = admission.updatedAt.split(\"T\")[0].split(\"-\");\n\n    return (\n        <Card className=\"rounded\">\n            <Row>\n                <Col>\n                    <Card.Body>\n                        <Row>\n                            <Col md={10}>\n                                <Link to={`/admissions/${admission._id}`}>\n                                    <Card.Title as=\"div\">\n                                        <h5><strong>{admission.title}</strong></h5>\n                                    </Card.Title>\n                                </Link>\n                            </Col>\n                            <Col>\n                                <Card.Text as=\"div\">\n                                    {admission.comments.length} comments\n                                </Card.Text>\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col md={10}>\n                                <Card.Text as=\"div\" className=\"text-muted\">\n                                    <strong>{admission.username}</strong>\n                                </Card.Text>\n                            </Col>\n                            <Col>\n                                <Card.Text as=\"div\">\n                                    {dateArray[1]}-{dateArray[2]}-{dateArray[0]}\n                                </Card.Text>\n                            </Col>\n                        </Row>\n                    </Card.Body>\n                </Col>\n            </Row>\n        </Card>\n    )\n}\n\nexport default Admission;","import React, { useEffect } from 'react';\nimport { Row, Col } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { getAllAdmissions } from '../actions/admissionAction';\nimport Admission from '../components/Admission';\nimport Message from '../components/Message';\nimport SearchBar from '../components/SearchBar';\nimport { ADMISSION_DETAIL_RESET } from '../constants/admissionConstants';\n\nconst AdmissionScreen = ({ match }) => {\n    const keyword = match.params.keyword;\n\n    const pageNum = match.params.pageNum || 1;\n\n    const dispatch = useDispatch();\n\n    const { userInfo } = useSelector(state => state.login);\n\n    const { admissions, error, page, pages } = useSelector(state => state.admissionAll);\n\n    useEffect(() => {\n        dispatch({ type: ADMISSION_DETAIL_RESET })\n        dispatch(getAllAdmissions(keyword, pageNum))\n    }, [dispatch, keyword, pageNum])\n\n    return (\n        <>\n            {error ? (\n                <Message variant=\"danger\">{error}</Message >\n            ) : (\n                <>\n                    <Row className=\"mt-3 justify-content-md-center\">\n                        <Col md={5}>\n                            <h3>All Admissions</h3>\n                        </Col>\n                        <Col md={5}>\n                            <div className=\"d-flex justify-content-end\">\n                                <SearchBar type=\"admissions\" />\n                                {userInfo && <Link className=\"btn btn-primary my-3 rounded ms-5\" to=\"/newadmission\">New Admission Result</Link>}\n                            </div>\n                        </Col>\n                    </Row>\n                    <Row className=\"justify-content-md-center\">\n                        <Col md={10}>\n                            {admissions.map(admission => (\n                                <Admission admission={admission} key={admission._id} />\n                            ))}\n                        </Col>\n                    </Row>\n                    <Row className=\"justify-content-md-center\">\n                        <Col md={5}>\n                            {page && page > 1 && <Link className=\"btn btn-primary my-3 rounded\" to={keyword ? `/admissions/search/${keyword}/page/${page - 1}` : `/admissions/page/${page - 1}`}><i className=\"fas fa-long-arrow-alt-left\"></i> Previous</Link>}\n                        </Col>\n                        <Col md={5}>\n                            <div className=\"d-flex justify-content-end\">\n                                {page && page < pages && <Link className=\"btn btn-primary my-3 rounded ms-auto\" to={keyword ? `/admissions/search/${keyword}/page/${page + 1}` : `/admissions/page/${page + 1}`}>Next <i className=\"fas fa-long-arrow-alt-right\"></i></Link>}\n                            </div>\n                        </Col>\n                    </Row>\n                </>\n            )}\n        </>\n    )\n}\n\nexport default AdmissionScreen;","import React, { useState, useEffect } from 'react';\nimport { Card, Row, Col, Button, Form } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { createAdmissionResult } from '../actions/admissionAction';\nimport FormContainer from '../components/FormContainer';\nimport Message from '../components/Message';\nimport { ADMISSION_CREATE_RESET } from '../constants/admissionConstants';\n\nconst NewAdmissionScreen = ({ history }) => {\n    const [college, setCollege] = useState('');\n    const [year, setYear] = useState('');\n    const [semester, setSemester] = useState('');\n    const [degree, setDegree] = useState('');\n    const [program, setProgram] = useState('');\n    const [result, setResult] = useState('');\n    const [date, setDate] = useState('');\n    const [title, setTitle] = useState('');\n    const [content, setContent] = useState('');\n    const [validated, setValidated] = useState(false);\n\n    const dispatch = useDispatch();\n\n    const { userInfo } = useSelector(state => state.login);\n\n    const { success, error } = useSelector(state => state.admissionCreate);\n\n    useEffect(() => {\n        if (!userInfo) {\n            history.push('/login')\n        }\n        if (success) {\n            dispatch({ type: ADMISSION_CREATE_RESET })\n            history.push('/myadmissions')\n        }\n    }, [dispatch, userInfo, success, history])\n\n    const submitHandler = (e) => {\n        e.preventDefault()\n        const form = e.currentTarget;\n        if (form.checkValidity() === true) {\n            dispatch(createAdmissionResult({\n                user: userInfo._id,\n                college,\n                year,\n                semester,\n                degree,\n                program,\n                result,\n                date,\n                title,\n                content\n            }))\n        }\n        setValidated(true)\n    };\n\n    return (\n        <FormContainer>\n            <h2 className=\"text-center py-3\">New Admission Result</h2>\n            {error && <Message variant=\"danger\">{error}</Message>}\n            <Card className=\"card\" border=\"primary\" >\n                <Card.Body>\n                    <Form noValidate validated={validated} onSubmit={submitHandler}>\n                        <Form.Group controlId=\"college\">\n                            <Form.Label>College</Form.Label>\n                            <Form.Control\n                                type=\"text\"\n                                placeholder=\"Enter college name\"\n                                value={college}\n                                onChange={e => setCollege(e.target.value)}\n                                required\n                            />\n                            <Form.Control.Feedback type=\"invalid\">\n                                College required.\n                            </Form.Control.Feedback>\n                        </Form.Group>\n                        <Row className=\"py-3\">\n                            <Col>\n                                <Form.Group controlId=\"year\">\n                                    <Form.Label>Year</Form.Label>\n                                    <Form.Control\n                                        type=\"text\"\n                                        placeholder=\"Enter year\"\n                                        value={year}\n                                        onChange={e => setYear(e.target.value)}\n                                        required\n                                    />\n                                    <Form.Control.Feedback type=\"invalid\">\n                                        Year required.\n                                    </Form.Control.Feedback>\n                                </Form.Group>\n                            </Col>\n                            <Col>\n                                <Form.Group controlId=\"semester\">\n                                    <Form.Label>Semester</Form.Label>\n                                    <Form.Control\n                                        as=\"select\"\n                                        className=\"form-select rounded\"\n                                        value={semester || ''}\n                                        onChange={e => setSemester(e.target.value)}\n                                        required\n                                    >\n                                        <option value=\"\">Choose...</option>\n                                        <option value=\"Fall\">Fall</option>\n                                        <option value=\"Spring\">Spring</option>\n                                    </Form.Control>\n                                    <Form.Control.Feedback type=\"invalid\">\n                                        Semester required.\n                                    </Form.Control.Feedback>\n                                </Form.Group>\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col>\n                                <Form.Group controlId=\"degree\">\n                                    <Form.Label>Degree</Form.Label>\n                                    <Form.Control\n                                        as=\"select\"\n                                        className=\"form-select rounded\"\n                                        value={degree || ''}\n                                        onChange={e => setDegree(e.target.value)}\n                                        required\n                                    >\n                                        <option value=\"\">Choose...</option>\n                                        <option value=\"Undergradute\">Undergraduate</option>\n                                        <option value=\"Master\">Master</option>\n                                        <option value=\"PhD\">PhD</option>\n                                    </Form.Control>\n                                    <Form.Control.Feedback type=\"invalid\">\n                                        Degree required.\n                                    </Form.Control.Feedback>\n                                </Form.Group>\n                            </Col>\n                            <Col>\n                                <Form.Group controlId=\"program\">\n                                    <Form.Label>Program</Form.Label>\n                                    <Form.Control\n                                        type=\"text\"\n                                        placeholder=\"Enter program\"\n                                        value={program}\n                                        onChange={e => setProgram(e.target.value)}\n                                        required\n                                    />\n                                    <Form.Control.Feedback type=\"invalid\">\n                                        Program required.\n                                    </Form.Control.Feedback>\n                                </Form.Group>\n                            </Col>\n                        </Row>\n                        <Row className=\"py-3\">\n                            <Col>\n                                <Form.Group controlId=\"result\">\n                                    <Form.Label>Admission Result</Form.Label>\n                                    <Form.Control\n                                        as=\"select\"\n                                        className=\"form-select rounded\"\n                                        value={result || ''}\n                                        onChange={e => setResult(e.target.value)}\n                                        required\n                                    >\n                                        <option value=\"\">Choose...</option>\n                                        <option value=\"Admitted\">Admitted</option>\n                                        <option value=\"Rejected\">Rejected</option>\n                                        <option value=\"Waitlist\">Waitlist</option>\n                                    </Form.Control>\n                                    <Form.Control.Feedback type=\"invalid\">\n                                        Admission result required.\n                                    </Form.Control.Feedback>\n                                </Form.Group>\n                            </Col>\n                            <Col>\n                                <Form.Group controlId=\"date\">\n                                    <Form.Label>Result Date</Form.Label>\n                                    <Form.Control\n                                        type=\"date\"\n                                        className=\"rounded\"\n                                        value={date || ''}\n                                        onChange={e => setDate(e.target.value)}\n                                        required\n                                    />\n                                    <Form.Control.Feedback type=\"invalid\">\n                                        Result date required.\n                                    </Form.Control.Feedback>\n                                </Form.Group>\n                            </Col>\n                        </Row>\n                        <Form.Group controlId=\"title\">\n                            <Form.Label>Title</Form.Label>\n                            <Form.Control\n                                type=\"text\"\n                                placeholder=\"Enter title of this admission result\"\n                                value={title}\n                                onChange={e => setTitle(e.target.value)}\n                                required\n                            />\n                            <Form.Control.Feedback type=\"invalid\">\n                                Title required.\n                            </Form.Control.Feedback>\n                        </Form.Group>\n                        <Form.Group controlId=\"content\" className=\"py-3\">\n                            <Form.Label>Extra Content</Form.Label>\n                            <Form.Control\n                                as=\"textarea\"\n                                rows=\"3\"\n                                placeholder=\"Enter extra content of this admission result\"\n                                value={content}\n                                onChange={e => setContent(e.target.value)}\n                            />\n                        </Form.Group>\n                        <div className=\"d-grid gap-2\">\n                            <Button type=\"submit\" variant=\"primary\">\n                                Create Admission Result\n                            </Button>\n                        </div>\n                    </Form>\n                </Card.Body>\n            </Card>\n            <Row className=\"py-3 text-center\">\n                <Col>\n                    <Link to='/admissions'>Go Back To All Admissions</Link>\n                </Col>\n            </Row>\n        </FormContainer>\n    )\n}\n\nexport default NewAdmissionScreen;","import React, { useState, useEffect } from 'react'\nimport { Row, Col, ListGroup, Card, Button, Form } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getAdmissionBackground } from '../actions/admissionAction';\nimport { getAdmissionDetail, addComment } from '../actions/admissionAction';\nimport Message from '../components/Message';\nimport { ADMISSION_COMMENT_RESET } from '../constants/admissionConstants';\n\nconst AdmissionDetailScreen = ({ match }) => {\n    const [comment, setComment] = useState('');\n\n    const admissionId = match.params.id;\n\n    const dispatch = useDispatch();\n\n    const { userInfo } = useSelector(state => state.login);\n\n    const { admission, error } = useSelector(state => state.admissionDetail);\n\n    const { user, error: errorBackground } = useSelector(state => state.admissionBackground);\n\n    const { success, error: errorComment } = useSelector(state => state.admissionComment);\n\n    useEffect(() => {\n        if (success) {\n            alert('Comment added.')\n            setComment('')\n            dispatch({ type: ADMISSION_COMMENT_RESET })\n        }\n        if (!admission || !admission.user) {\n            dispatch(getAdmissionDetail(admissionId))\n        }\n        if (admission.user && (!user || !user.school)) {\n            dispatch(getAdmissionBackground(admission.user))\n        }\n    }, [dispatch, user, admissionId, admission, success])\n\n    const addCommentHandler = (e) => {\n        e.preventDefault();\n        dispatch(addComment(match.params.id, { comment }));\n    };\n\n    return (\n        <>\n            <Link className=\"btn btn-primary my-3\" to=\"/admissions\">Go Back</Link>\n            {error ? (\n                <Message variant=\"danger\">{error}</Message>\n            ) : (\n                errorBackground ? (\n                    <Message variant=\"danger\">{errorBackground}</Message>\n                ) : (\n                    <>\n                        <Row className=\"justify-content-md-center\">\n                            <h2 className=\"text-center mb-5 admission-title\">{admission.title}</h2>\n                            <Col md={5}>\n                                <h5 className=\"text-center\">Background Information</h5>\n                                <Card className=\"my-3 px-1\" border=\"primary\">\n                                    <ListGroup variant=\"flush\">\n                                        <ListGroup.Item>\n                                            <strong>Username:</strong> {admission.username}\n                                        </ListGroup.Item>\n                                        <ListGroup.Item>\n                                            <strong>School:</strong> {user.school}\n                                        </ListGroup.Item>\n                                        <ListGroup.Item>\n                                            <strong>School Level:</strong> {user.schoolLevel}\n                                        </ListGroup.Item>\n                                        <ListGroup.Item>\n                                            <strong>Major:</strong> {user.major}\n                                        </ListGroup.Item>\n                                        <ListGroup.Item>\n                                            <strong>GPA:</strong> {user.gpa}\n                                        </ListGroup.Item>\n                                        <ListGroup.Item>\n                                            <strong>{user.langTest} Score:</strong> {user.langScore}\n                                        </ListGroup.Item>\n                                        <ListGroup.Item>\n                                            <strong>{user.genTest} Score:</strong> {user.genScore}\n                                        </ListGroup.Item>\n                                        <ListGroup.Item>\n                                            <strong>Work Experience:</strong> {user.workLevel} ({user.workYears})\n                                        </ListGroup.Item>\n                                        <ListGroup.Item>\n                                            <strong>Research Experience:</strong> {user.researchExp ? user.researchExp : 'N/A'}\n                                        </ListGroup.Item>\n                                        <ListGroup.Item>\n                                            <strong>Competition Experience:</strong> {user.competitionExp ? user.competitionExp : 'N/A'}\n                                        </ListGroup.Item>\n                                        <ListGroup.Item>\n                                            <strong>Other Backgrounds:</strong> {user.otherInfo ? user.otherInfo : 'N/A'}\n                                        </ListGroup.Item>\n                                    </ListGroup>\n                                </Card>\n                            </Col>\n                            <Col md={5}>\n                                <h5 className=\"text-center\">Admission Result</h5>\n                                <Card className=\"my-3 px-1\" border=\"primary\">\n                                    <ListGroup variant=\"flush\">\n                                        <ListGroup.Item>\n                                            <strong>College:</strong> {admission.college}\n                                        </ListGroup.Item>\n                                        <ListGroup.Item>\n                                            <strong>Academic Year:</strong> {admission.year} {admission.semester}\n                                        </ListGroup.Item>\n                                        <ListGroup.Item>\n                                            <strong>Degree:</strong> {admission.degree}\n                                        </ListGroup.Item>\n                                        <ListGroup.Item>\n                                            <strong>Program:</strong> {admission.program}\n                                        </ListGroup.Item>\n                                        <ListGroup.Item>\n                                            <strong>Result:</strong> {admission.result}\n                                        </ListGroup.Item>\n                                        <ListGroup.Item>\n                                            <strong>Date Received:</strong> {admission.date && `${admission.date.split(\"T\")[0].split(\"-\")[1]}-${admission.date.split(\"T\")[0].split(\"-\")[2]}-${admission.date.split(\"T\")[0].split(\"-\")[0]}`}\n                                        </ListGroup.Item>\n                                        <ListGroup.Item className=\"admission-message\">\n                                            <strong>Message:</strong>\n                                            <br></br>\n                                            {admission.content}\n                                        </ListGroup.Item>\n                                    </ListGroup>\n                                </Card>\n                            </Col>\n                        </Row>\n                        <Row className=\"justify-content-md-center mt-5\">\n                            {errorComment && <Message variant='danger'>{errorComment}</Message>}\n                            <Col md={10}>\n                                <ListGroup variant=\"flush\">\n                                    {userInfo ? (\n                                        <Form onSubmit={addCommentHandler}>\n                                            <Form.Group controlId=\"comment\">\n                                                <Form.Label><strong>Add Comment</strong></Form.Label>\n                                                <Form.Control\n                                                    as=\"textarea\"\n                                                    rows=\"3\"\n                                                    value={comment}\n                                                    onChange={e => setComment(e.target.value)}\n                                                    className=\"rounded\"\n                                                />\n                                            </Form.Group>\n                                            <Button type=\"submit\" variant=\"primary\" className=\"rounded mt-2\">Submit</Button>\n                                        </Form>\n                                    ) : (\n                                        <Form onSubmit={addCommentHandler}>\n                                            <Form.Group controlId=\"comment\">\n                                                <Form.Label><strong><Link to=\"/login\">Login</Link> to leave a comment</strong></Form.Label>\n                                                <Form.Control\n                                                    as=\"textarea\"\n                                                    rows=\"3\"\n                                                    value={comment}\n                                                    onChange={e => setComment(e.target.value)}\n                                                    className=\"rounded\"\n                                                    disabled\n                                                />\n                                            </Form.Group>\n                                            <Button type=\"submit\" variant=\"primary\" className=\"rounded mt-2\" disabled>Submit</Button>\n                                        </Form>\n                                    )}\n                                </ListGroup>\n                            </Col>\n                        </Row>\n                        <Row className=\"justify-content-md-center mt-5\">\n                            <Col md={10}>\n                                <strong>All Comments</strong>\n                                <Card className=\"mt-2 px-1\" border=\"primary\">\n                                    <ListGroup variant=\"flush\">\n                                        {admission.comments && admission.comments.map(cmt => (\n                                            <ListGroup.Item key={cmt._id} className=\"py-3\">\n                                                <Row>\n                                                    <Col md={10}>\n                                                        <h5><strong>{cmt.username}</strong></h5>\n                                                    </Col>\n                                                    <Col>\n                                                        {cmt.createdAt.substring(0, 10)}\n                                                    </Col>\n                                                </Row>\n                                                <Row className=\"pt-3\">\n                                                    <Col>\n                                                        {cmt.comment}\n                                                    </Col>\n                                                </Row>\n                                            </ListGroup.Item>\n                                        ))}\n                                    </ListGroup>\n                                </Card>\n                            </Col>\n                        </Row>\n                    </>\n                )\n            )}\n        </>\n    )\n}\n\nexport default AdmissionDetailScreen;","import React, { useEffect } from 'react';\nimport { Row, Col, Button, Table } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport { LinkContainer } from 'react-router-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getMyAdmissions, deleteAdmissionResult } from '../actions/admissionAction';\nimport Message from '../components/Message';\nimport { MY_ADMISSIONS_RESET } from '../constants/admissionConstants';\n\nconst MyAdmissionsScreen = ({ history }) => {\n    const dispatch = useDispatch();\n\n    const { userInfo } = useSelector(state => state.login);\n\n    const { admissions, error } = useSelector(state => state.myAdmissions);\n\n    const { success } = useSelector(state => state.admissionDelete);\n\n    useEffect(() => {\n        dispatch({ type: MY_ADMISSIONS_RESET })\n        if (!userInfo) {\n            history.push('/login')\n        } else {\n            dispatch(getMyAdmissions())\n        }\n    }, [dispatch, userInfo, success, history])\n\n    const deleteHandler = (id) => {\n        if (window.confirm('Are you sure you want to delete this admission result?')) {\n            dispatch(deleteAdmissionResult(id))\n        }\n    }\n\n    return (\n        <Row className=\"justify-content-md-center\">\n            <Col md={10}>\n                <h3>My Admissions</h3>\n                {!admissions ? (\n                    <>\n                    </>\n                ) : error ? (\n                    <Message variant=\"danger\">{error}</Message>\n                ) : (\n                    <Table striped bordered hover responsive className=\"table-sm\">\n                        <thead>\n                            <tr>\n                                <th>Title</th>\n                                <th>Date</th>\n                                <th>Manage</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {admissions.map(admission => (\n                                <tr key={admission._id}>\n                                    <td>\n                                        <Link to={`/admissions/${admission._id}`}>\n                                            {admission.title}\n                                        </Link>\n                                    </td>\n                                    <td>{admission.createdAt.split(\"T\")[0].split(\"-\")[1]}-{admission.createdAt.split(\"T\")[0].split(\"-\")[2]}-{admission.createdAt.split(\"T\")[0].split(\"-\")[0]}</td>\n                                    <td>\n                                        <LinkContainer to={`/admissions/${admission._id}/edit`}>\n                                            <Button variant=\"primary\" className=\"btn-sm\">\n                                                <i className=\"fas fa-edit\"></i>\n                                            </Button>\n                                        </LinkContainer>\n                                        <Button variant=\"danger\" className=\"btn-sm\" onClick={() => deleteHandler(admission._id)}>\n                                            <i className=\"fas fa-trash\"></i>\n                                        </Button>\n                                    </td>\n                                </tr>\n                            ))}\n                        </tbody>\n                    </Table>\n                )}\n            </Col>\n        </Row>\n    )\n}\n\nexport default MyAdmissionsScreen;","import React, { useState, useEffect } from 'react';\nimport { Card, Row, Col, Button, Form } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getAdmissionDetail, updateAdmissionResult } from '../actions/admissionAction';\nimport FormContainer from '../components/FormContainer';\nimport Message from '../components/Message';\nimport { ADMISSION_UPDATE_RESET } from '../constants/admissionConstants';\n\nconst AdmissionEditScreen = ({ match, history }) => {\n    const admissionId = match.params.id;\n\n    const [college, setCollege] = useState('');\n    const [year, setYear] = useState('');\n    const [semester, setSemester] = useState('');\n    const [degree, setDegree] = useState('');\n    const [program, setProgram] = useState('');\n    const [result, setResult] = useState('');\n    const [date, setDate] = useState('');\n    const [title, setTitle] = useState('');\n    const [content, setContent] = useState('');\n    const [update, setUpdate] = useState(false);\n    const [validated, setValidated] = useState(false);\n\n    const dispatch = useDispatch();\n\n    const { admission, error } = useSelector(state => state.admissionDetail);\n\n    const { success, error: errorUpdate } = useSelector(state => state.admissionUpdate);\n\n    useEffect(() => {\n        if (success) {\n            dispatch({ type: ADMISSION_UPDATE_RESET })\n            setTimeout(() => {\n                history.push('/myadmissions')\n            }, 1000)\n        } else {\n            if (!admissionId || admission._id !== admissionId) {\n                dispatch(getAdmissionDetail(admissionId));\n            } else {\n                setCollege(admission.college);\n                setYear(admission.year);\n                setSemester(admission.semester);\n                setDegree(admission.degree);\n                setProgram(admission.program);\n                setResult(admission.result);\n                setDate(admission.date.split(\"T\")[0]);\n                setTitle(admission.title);\n                setContent(admission.content);\n            }\n        }\n    }, [dispatch, success, admissionId, admission, history])\n\n    const submitHandler = (e) => {\n        e.preventDefault()\n        const form = e.currentTarget;\n        if (form.checkValidity() === true) {\n            dispatch(updateAdmissionResult({\n                _id: admissionId,\n                college,\n                year,\n                semester,\n                degree,\n                program,\n                result,\n                date,\n                title,\n                content\n            }));\n            setUpdate(true)\n        }\n        setValidated(true)\n    };\n\n    return (\n        <FormContainer>\n            <h2 className=\"text-center py-3\">Update Admission Result</h2>\n            {errorUpdate && <Message variant=\"danger\">{errorUpdate}</Message>}\n            {error ? (\n                <Message variant=\"danger\">{error}</Message>\n            ) : (\n                <>\n                    {update && <Message variant=\"success\">Admission Result Updated</Message>}\n                    <Card className=\"card\" border=\"primary\" >\n                        <Card.Body>\n                            <Form noValidate validated={validated} onSubmit={submitHandler}>\n                                <Form.Group controlId=\"college\">\n                                    <Form.Label>College</Form.Label>\n                                    <Form.Control\n                                        type=\"text\"\n                                        placeholder=\"Enter college name\"\n                                        value={college}\n                                        onChange={e => setCollege(e.target.value)}\n                                        required\n                                    />\n                                    <Form.Control.Feedback type=\"invalid\">\n                                        College required.\n                                    </Form.Control.Feedback>\n                                </Form.Group>\n                                <Row className=\"py-3\">\n                                    <Col>\n                                        <Form.Group controlId=\"year\">\n                                            <Form.Label>Year</Form.Label>\n                                            <Form.Control\n                                                type=\"text\"\n                                                placeholder=\"Enter year\"\n                                                value={year}\n                                                onChange={e => setYear(e.target.value)}\n                                                required\n                                            />\n                                            <Form.Control.Feedback type=\"invalid\">\n                                                Year required.\n                                            </Form.Control.Feedback>\n                                        </Form.Group>\n                                    </Col>\n                                    <Col>\n                                        <Form.Group controlId=\"semester\">\n                                            <Form.Label>Semester</Form.Label>\n                                            <Form.Control\n                                                as=\"select\"\n                                                className=\"form-select rounded\"\n                                                value={semester || ''}\n                                                onChange={e => setSemester(e.target.value)}\n                                                required\n                                            >\n                                                <option value=\"\">Choose...</option>\n                                                <option value=\"Fall\">Fall</option>\n                                                <option value=\"Spring\">Spring</option>\n                                            </Form.Control>\n                                            <Form.Control.Feedback type=\"invalid\">\n                                                Semester required.\n                                            </Form.Control.Feedback>\n                                        </Form.Group>\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col>\n                                        <Form.Group controlId=\"degree\">\n                                            <Form.Label>Degree</Form.Label>\n                                            <Form.Control\n                                                as=\"select\"\n                                                className=\"form-select rounded\"\n                                                value={degree || ''}\n                                                onChange={e => setDegree(e.target.value)}\n                                                required\n                                            >\n                                                <option value=\"\">Choose...</option>\n                                                <option value=\"Undergradute\">Undergraduate</option>\n                                                <option value=\"Master\">Master</option>\n                                                <option value=\"PhD\">PhD</option>\n                                            </Form.Control>\n                                            <Form.Control.Feedback type=\"invalid\">\n                                                Degree required.\n                                            </Form.Control.Feedback>\n                                        </Form.Group>\n                                    </Col>\n                                    <Col>\n                                        <Form.Group controlId=\"program\">\n                                            <Form.Label>Program</Form.Label>\n                                            <Form.Control\n                                                type=\"text\"\n                                                placeholder=\"Enter program\"\n                                                value={program}\n                                                onChange={e => setProgram(e.target.value)}\n                                                required\n                                            />\n                                            <Form.Control.Feedback type=\"invalid\">\n                                                Program required.\n                                            </Form.Control.Feedback>\n                                        </Form.Group>\n                                    </Col>\n                                </Row>\n                                <Row className=\"py-3\">\n                                    <Col>\n                                        <Form.Group controlId=\"result\">\n                                            <Form.Label>Admission Result</Form.Label>\n                                            <Form.Control\n                                                as=\"select\"\n                                                className=\"form-select rounded\"\n                                                value={result || ''}\n                                                onChange={e => setResult(e.target.value)}\n                                                required\n                                            >\n                                                <option value=\"\">Choose...</option>\n                                                <option value=\"Admitted\">Admitted</option>\n                                                <option value=\"Rejected\">Rejected</option>\n                                                <option value=\"Waitlist\">Waitlist</option>\n                                            </Form.Control>\n                                            <Form.Control.Feedback type=\"invalid\">\n                                                Admission result required.\n                                            </Form.Control.Feedback>\n                                        </Form.Group>\n                                    </Col>\n                                    <Col>\n                                        <Form.Group controlId=\"date\">\n                                            <Form.Label>Result Date</Form.Label>\n                                            <Form.Control\n                                                type=\"date\"\n                                                className=\"rounded\"\n                                                value={date || ''}\n                                                onChange={e => setDate(e.target.value)}\n                                                required\n                                            />\n                                            <Form.Control.Feedback type=\"invalid\">\n                                                Result date required.\n                                            </Form.Control.Feedback>\n                                        </Form.Group>\n                                    </Col>\n                                </Row>\n                                <Form.Group controlId=\"title\">\n                                    <Form.Label>Title</Form.Label>\n                                    <Form.Control\n                                        type=\"text\"\n                                        placeholder=\"Enter title of this admission result\"\n                                        value={title}\n                                        onChange={e => setTitle(e.target.value)}\n                                        required\n                                    />\n                                    <Form.Control.Feedback type=\"invalid\">\n                                        Title required.\n                                    </Form.Control.Feedback>\n                                </Form.Group>\n                                <Form.Group controlId=\"content\" className=\"py-3\">\n                                    <Form.Label>Extra Content</Form.Label>\n                                    <Form.Control\n                                        as=\"textarea\"\n                                        rows=\"3\"\n                                        placeholder=\"Enter extra content of this admission result\"\n                                        value={content}\n                                        onChange={e => setContent(e.target.value)}\n                                    />\n                                </Form.Group>\n                                <div className=\"d-grid gap-2\">\n                                    <Button type=\"submit\" variant=\"primary\">\n                                        Update Admission Result\n                                    </Button>\n                                </div>\n                            </Form>\n                        </Card.Body>\n                    </Card>\n                </>\n            )}\n            <Row className=\"py-3 text-center\">\n                <Col>\n                    <Link to='/myadmissions'>Go Back To My Admissions</Link>\n                </Col>\n            </Row>\n        </FormContainer>\n    )\n}\n\nexport default AdmissionEditScreen;","import axios from 'axios';\nimport {\n    POST_CREATE_SUCCESS,\n    POST_CREATE_FAIL,\n    POST_UPDATE_SUCCESS,\n    POST_UPDATE_FAIL,\n    POST_DELETE_SUCCESS,\n    POST_DELETE_FAIL,\n    POST_ALL_SUCCESS,\n    POST_ALL_FAIL,\n    POST_DETAIL_SUCCESS,\n    POST_DETAIL_FAIL,\n    MY_POSTS_SUCCESS,\n    MY_POSTS_FAIL,\n    POST_COMMENT_SUCCESS,\n    POST_COMMENT_FAIL\n} from '../constants/postConstants';\n\nexport const createPost = (post) => async (dispatch, getState) => {\n    try {\n        const { login: { userInfo } } = getState();\n        const config = {\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        }\n        const { data } = await axios.post('/api/posts', post, config);\n        dispatch({\n            type: POST_CREATE_SUCCESS,\n            payload: data\n        })\n    } catch (error) {\n        dispatch({\n            type: POST_CREATE_FAIL,\n            payload: error.response.data.message\n        })\n    }\n}\n\nexport const updatePost = (post) => async (dispatch, getState) => {\n    try {\n        const { login: { userInfo } } = getState();\n        const config = {\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        }\n        const { data } = await axios.put(`/api/posts/${post._id}`, post, config);\n        dispatch({\n            type: POST_UPDATE_SUCCESS,\n        })\n        dispatch({\n            type: POST_DETAIL_SUCCESS,\n            payload: data\n        })\n    } catch (error) {\n        dispatch({\n            type: POST_UPDATE_FAIL,\n            payload: error.response.data.message\n        })\n    }\n}\n\nexport const deletePost = (id) => async (dispatch, getState) => {\n    try {\n        const { login: { userInfo } } = getState();\n        const config = {\n            headers: {\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        }\n        await axios.delete(`/api/posts/${id}`, config);\n        dispatch({\n            type: POST_DELETE_SUCCESS,\n        })\n    } catch (error) {\n        dispatch({\n            type: POST_DELETE_FAIL,\n            payload: error.response.data.message\n        })\n    }\n}\n\nexport const getAllPosts = (keyword = \"\", pageNum = \"\") => async (dispatch) => {\n    try {\n        const { data } = await axios.get(`/api/posts?keyword=${keyword}&pageNum=${pageNum}`);\n        dispatch({\n            type: POST_ALL_SUCCESS,\n            payload: data\n        })\n    } catch (error) {\n        dispatch({\n            type: POST_ALL_FAIL,\n            payload: error.response.data.message\n        })\n    }\n}\n\nexport const getPostDetail = (id) => async (dispatch) => {\n    try {\n        const { data } = await axios.get(`/api/posts/${id}`);\n        dispatch({\n            type: POST_DETAIL_SUCCESS,\n            payload: data\n        })\n    } catch (error) {\n        dispatch({\n            type: POST_DETAIL_FAIL,\n            payload: error.response.data.message\n        })\n    }\n}\n\nexport const getMyPosts = () => async (dispatch, getState) => {\n    try {\n        const { login: { userInfo } } = getState();\n        const config = {\n            headers: {\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        }\n        const { data } = await axios.get('/api/posts/myposts', config);\n        dispatch({\n            type: MY_POSTS_SUCCESS,\n            payload: data\n        })\n    } catch (error) {\n        dispatch({\n            type: MY_POSTS_FAIL,\n            payload: error.response.data.message\n        })\n    }\n}\n\nexport const addComment = (id, comment) => async (dispatch, getState) => {\n    try {\n        const { login: { userInfo } } = getState();\n        const config = {\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        }\n        const { data } = await axios.post(`/api/posts/${id}/comments`, comment, config);\n        dispatch({\n            type: POST_COMMENT_SUCCESS,\n            payload: data\n        })\n    } catch (error) {\n        dispatch({\n            type: POST_COMMENT_FAIL,\n            payload: error.response.data.message\n        })\n    }\n}","import React from 'react'\nimport { Card, Row, Col } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\n\nconst Post = ({ post }) => {\n    const dateArray = post.updatedAt.split(\"T\")[0].split(\"-\");\n\n    return (\n        <Card className=\"rounded\">\n            <Row>\n                <Col>\n                    <Card.Body>\n                        <Row>\n                            <Col md={10}>\n                                <Link to={`/posts/${post._id}`}>\n                                    <Card.Title as=\"div\">\n                                        <h5><strong>{post.title}</strong></h5>\n                                    </Card.Title>\n                                </Link>\n                            </Col>\n                            <Col>\n                                <Card.Text as=\"div\">\n                                    {post.comments.length} comments\n                                </Card.Text>\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col md={10}>\n                                <Card.Text as=\"div\" className=\"text-muted\">\n                                    <strong>{post.username}</strong>\n                                </Card.Text>\n                            </Col>\n                            <Col>\n                                <Card.Text as=\"div\">\n                                    {dateArray[1]}-{dateArray[2]}-{dateArray[0]}\n                                </Card.Text>\n                            </Col>\n                        </Row>\n                    </Card.Body>\n                </Col>\n            </Row>\n        </Card>\n    )\n}\n\nexport default Post;","import React, { useEffect } from 'react';\nimport { Row, Col } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { getAllPosts } from '../actions/postAction';\nimport Post from '../components/Post';\nimport Message from '../components/Message';\nimport SearchBar from '../components/SearchBar';\nimport { POST_DETAIL_RESET } from '../constants/postConstants';\n\nconst ForumScreen = ({ match }) => {\n    const keyword = match.params.keyword;\n\n    const pageNum = match.params.pageNum || 1;\n\n    const dispatch = useDispatch();\n\n    const { userInfo } = useSelector(state => state.login);\n\n    const { posts, error, page, pages } = useSelector(state => state.postAll);\n\n    useEffect(() => {\n        dispatch({ type: POST_DETAIL_RESET })\n        dispatch(getAllPosts(keyword, pageNum))\n    }, [dispatch, keyword, pageNum])\n\n    return (\n        <>\n            {error ? (\n                <Message variant=\"danger\">{error}</Message >\n            ) : (\n                <>\n                    <Row className=\"mt-3 justify-content-md-center\">\n                        <Col md={5}>\n                            <h3>All Posts</h3>\n                        </Col>\n                        <Col md={5}>\n                            <div className=\"d-flex justify-content-end\">\n                                <SearchBar type=\"forums\" />\n                                {userInfo && <Link className=\"btn btn-primary my-3 rounded ms-5\" to=\"/newpost\">New Post</Link>}\n                            </div>\n                        </Col>\n                    </Row>\n                    <Row className=\"justify-content-md-center\">\n                        <Col md={10}>\n                            {posts.map(post => (\n                                <Post post={post} key={post._id} />\n                            ))}\n                        </Col>\n                    </Row>\n                    <Row className=\"justify-content-md-center\">\n                        <Col md={5}>\n                            {page && page > 1 && <Link className=\"btn btn-primary my-3 rounded\" to={keyword ? `/forums/search/${keyword}/page/${page - 1}` : `/forums/page/${page - 1}`}><i className=\"fas fa-long-arrow-alt-left\"></i> Previous</Link>}\n                        </Col>\n                        <Col md={5}>\n                            <div className=\"d-flex justify-content-end\">\n                                {page && page < pages && <Link className=\"btn btn-primary my-3 rounded ms-auto\" to={keyword ? `/forums/search/${keyword}/page/${page + 1}` : `/forums/page/${page + 1}`}>Next <i className=\"fas fa-long-arrow-alt-right\"></i></Link>}\n                            </div>\n                        </Col>\n                    </Row>\n                </>\n            )}\n        </>\n    )\n}\n\nexport default ForumScreen;","import React, { useState, useEffect } from 'react';\nimport { Card, Row, Col, Button, Form } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { createPost } from '../actions/postAction';\nimport FormContainer from '../components/FormContainer';\nimport Message from '../components/Message';\nimport { POST_CREATE_RESET } from '../constants/postConstants';\n\nconst NewPostScreen = ({ history }) => {\n    const [title, setTitle] = useState('');\n    const [content, setContent] = useState('');\n    const [validated, setValidated] = useState(false);\n\n    const dispatch = useDispatch();\n\n    const { userInfo } = useSelector(state => state.login);\n\n    const { success, error } = useSelector(state => state.postCreate);\n\n    useEffect(() => {\n        if (!userInfo) {\n            history.push('/login')\n        }\n        if (success) {\n            dispatch({ type: POST_CREATE_RESET })\n            history.push('/myposts')\n        }\n    }, [dispatch, userInfo, success, history])\n\n    const submitHandler = (e) => {\n        e.preventDefault()\n        const form = e.currentTarget;\n        if (form.checkValidity() === true) {\n            dispatch(createPost({\n                user: userInfo._id,\n                title,\n                content\n            }))\n        }\n        setValidated(true)\n    };\n\n    return (\n        <FormContainer>\n            <h2 className=\"text-center py-3\">New Post</h2>\n            {error && <Message variant=\"danger\">{error}</Message>}\n            <Card className=\"card\" border=\"primary\" >\n                <Card.Body>\n                    <Form noValidate validated={validated} onSubmit={submitHandler}>\n                        <Form.Group controlId=\"title\">\n                            <Form.Label>Title</Form.Label>\n                            <Form.Control\n                                type=\"text\"\n                                placeholder=\"Enter title of this post\"\n                                value={title}\n                                onChange={e => setTitle(e.target.value)}\n                                required\n                            />\n                            <Form.Control.Feedback type=\"invalid\">\n                                Title required.\n                            </Form.Control.Feedback>\n                        </Form.Group>\n                        <Form.Group controlId=\"content\" className=\"py-3\">\n                            <Form.Label>Content</Form.Label>\n                            <Form.Control\n                                as=\"textarea\"\n                                rows=\"5\"\n                                placeholder=\"Enter content of this post\"\n                                value={content}\n                                onChange={e => setContent(e.target.value)}\n                                required\n                            />\n                            <Form.Control.Feedback type=\"invalid\">\n                                Content required.\n                            </Form.Control.Feedback>\n                        </Form.Group>\n                        <div className=\"d-grid gap-2\">\n                            <Button type=\"submit\" variant=\"primary\">\n                                Create Post\n                            </Button>\n                        </div>\n                    </Form>\n                </Card.Body>\n            </Card>\n            <Row className=\"py-3 text-center\">\n                <Col>\n                    <Link to='/forums'>Go Back To Forums</Link>\n                </Col>\n            </Row>\n        </FormContainer>\n    )\n}\n\nexport default NewPostScreen;","import React, { useState, useEffect } from 'react'\nimport { Row, Col, ListGroup, Card, Button, Form } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getPostDetail, addComment } from '../actions/postAction';\nimport Message from '../components/Message';\nimport { POST_COMMENT_RESET } from '../constants/postConstants';\n\nconst PostDetailScreen = ({ match }) => {\n    const [comment, setComment] = useState('');\n\n    const postId = match.params.id;\n\n    const dispatch = useDispatch();\n\n    const { userInfo } = useSelector(state => state.login);\n\n    const { post, error } = useSelector(state => state.postDetail);\n\n    const { success, error: errorComment } = useSelector(state => state.postComment);\n\n    useEffect(() => {\n        if (success) {\n            alert('Comment added.')\n            setComment('')\n            dispatch({ type: POST_COMMENT_RESET })\n        }\n        if (!post || !post.title) {\n            dispatch(getPostDetail(postId))\n        }\n    }, [dispatch, postId, post, success])\n\n    const addCommentHandler = (e) => {\n        e.preventDefault();\n        dispatch(addComment(match.params.id, { comment }));\n    };\n\n    return (\n        <>\n            <Link className=\"btn btn-primary my-3\" to=\"/forums\">Go Back</Link>\n            {error ? (\n                <Message variant=\"danger\">{error}</Message>\n            ) : (\n                <>\n                    <Row className=\"justify-content-md-center\">\n                        <h2 className=\"text-center mb-5 post-title\">{post.title}</h2>\n                        <Col md={10}>\n                            <Card className=\"my-3 px-1\" border=\"primary\">\n                                <ListGroup variant=\"flush\">\n                                    <ListGroup.Item className=\"post-message\">\n                                        {post.content}\n                                    </ListGroup.Item>\n                                </ListGroup>\n                            </Card>\n                        </Col>\n                    </Row>\n                    <Row className=\"justify-content-md-center mt-5\">\n                        {errorComment && <Message variant='danger'>{errorComment}</Message>}\n                        <Col md={10}>\n                            <ListGroup variant=\"flush\">\n                                {userInfo ? (\n                                    <Form onSubmit={addCommentHandler}>\n                                        <Form.Group controlId=\"comment\">\n                                            <Form.Label><strong>Add Comment</strong></Form.Label>\n                                            <Form.Control\n                                                as=\"textarea\"\n                                                rows=\"3\"\n                                                value={comment}\n                                                onChange={e => setComment(e.target.value)}\n                                                className=\"rounded\"\n                                            />\n                                        </Form.Group>\n                                        <Button type=\"submit\" variant=\"primary\" className=\"rounded mt-2\">Submit</Button>\n                                    </Form>\n                                ) : (\n                                    <Form onSubmit={addCommentHandler}>\n                                        <Form.Group controlId=\"comment\">\n                                            <Form.Label><strong><Link to=\"/login\">Login</Link> to leave a comment</strong></Form.Label>\n                                            <Form.Control\n                                                as=\"textarea\"\n                                                rows=\"3\"\n                                                value={comment}\n                                                onChange={e => setComment(e.target.value)}\n                                                className=\"rounded\"\n                                                disabled\n                                            />\n                                        </Form.Group>\n                                        <Button type=\"submit\" variant=\"primary\" className=\"rounded mt-2\" disabled>Submit</Button>\n                                    </Form>\n                                )}\n                            </ListGroup>\n                        </Col>\n                    </Row>\n                    <Row className=\"justify-content-md-center mt-5\">\n                        <Col md={10}>\n                            <strong>All Comments</strong>\n                            <Card className=\"mt-2 px-1\" border=\"primary\">\n                                <ListGroup variant=\"flush\">\n                                    {post.comments && post.comments.map(cmt => (\n                                        <ListGroup.Item key={cmt._id} className=\"py-3\">\n                                            <Row>\n                                                <Col md={10}>\n                                                    <h5><strong>{cmt.username}</strong></h5>\n                                                </Col>\n                                                <Col>\n                                                    {cmt.createdAt.substring(0, 10)}\n                                                </Col>\n                                            </Row>\n                                            <Row className=\"pt-3\">\n                                                <Col>\n                                                    {cmt.comment}\n                                                </Col>\n                                            </Row>\n                                        </ListGroup.Item>\n                                    ))}\n                                </ListGroup>\n                            </Card>\n                        </Col>\n                    </Row>\n                </>\n            )}\n        </>\n    )\n}\n\nexport default PostDetailScreen;","import React, { useEffect } from 'react';\nimport { Row, Col, Button, Table } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport { LinkContainer } from 'react-router-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getMyPosts, deletePost } from '../actions/postAction';\nimport Message from '../components/Message';\nimport { MY_POSTS_RESET } from '../constants/postConstants';\n\nconst MyPostsScreen = ({ history }) => {\n    const dispatch = useDispatch();\n\n    const { userInfo } = useSelector(state => state.login);\n\n    const { posts, error } = useSelector(state => state.myPosts);\n\n    const { success } = useSelector(state => state.postDelete);\n\n    useEffect(() => {\n        dispatch({ type: MY_POSTS_RESET })\n        if (!userInfo) {\n            history.push('/login')\n        } else {\n            dispatch(getMyPosts())\n        }\n    }, [dispatch, userInfo, success, history])\n\n    const deleteHandler = (id) => {\n        if (window.confirm('Are you sure you want to delete this post?')) {\n            dispatch(deletePost(id))\n        }\n    }\n\n    return (\n        <Row className=\"justify-content-md-center\">\n            <Col md={10}>\n                <h3>My Posts</h3>\n                {!posts ? (\n                    <>\n                    </>\n                ) : error ? (\n                    <Message variant=\"danger\">{error}</Message>\n                ) : (\n                    <Table striped bordered hover responsive className=\"table-sm\">\n                        <thead>\n                            <tr>\n                                <th>Title</th>\n                                <th>Date</th>\n                                <th>Manage</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {posts.map(post => (\n                                <tr key={post._id}>\n                                    <td>\n                                        <Link to={`/posts/${post._id}`}>\n                                            {post.title}\n                                        </Link>\n                                    </td>\n                                    <td>{post.createdAt.split(\"T\")[0].split(\"-\")[1]}-{post.createdAt.split(\"T\")[0].split(\"-\")[2]}-{post.createdAt.split(\"T\")[0].split(\"-\")[0]}</td>\n                                    <td>\n                                        <LinkContainer to={`/posts/${post._id}/edit`}>\n                                            <Button variant=\"primary\" className=\"btn-sm\">\n                                                <i className=\"fas fa-edit\"></i>\n                                            </Button>\n                                        </LinkContainer>\n                                        <Button variant=\"danger\" className=\"btn-sm\" onClick={() => deleteHandler(post._id)}>\n                                            <i className=\"fas fa-trash\"></i>\n                                        </Button>\n                                    </td>\n                                </tr>\n                            ))}\n                        </tbody>\n                    </Table>\n                )}\n            </Col>\n        </Row>\n    )\n}\n\nexport default MyPostsScreen;","import React, { useState, useEffect } from 'react';\nimport { Card, Row, Col, Button, Form } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getPostDetail, updatePost } from '../actions/postAction';\nimport FormContainer from '../components/FormContainer';\nimport Message from '../components/Message';\nimport { POST_UPDATE_RESET } from '../constants/postConstants';\n\nconst PostEditScreen = ({ match, history }) => {\n    const postId = match.params.id;\n\n    const [title, setTitle] = useState('');\n    const [content, setContent] = useState('');\n    const [update, setUpdate] = useState(false);\n    const [validated, setValidated] = useState(false);\n\n    const dispatch = useDispatch();\n\n    const { post, error } = useSelector(state => state.postDetail);\n\n    const { success, error: errorUpdate } = useSelector(state => state.postUpdate);\n\n    useEffect(() => {\n        if (success) {\n            dispatch({ type: POST_UPDATE_RESET })\n            setTimeout(() => {\n                history.push('/myposts')\n            }, 1000)\n        } else {\n            if (!postId || post._id !== postId) {\n                dispatch(getPostDetail(postId));\n            } else {\n                setTitle(post.title);\n                setContent(post.content);\n            }\n        }\n    }, [dispatch, success, postId, post, history])\n\n    const submitHandler = (e) => {\n        e.preventDefault()\n        const form = e.currentTarget;\n        if (form.checkValidity() === true) {\n            dispatch(updatePost({\n                _id: postId,\n                title,\n                content\n            }));\n            setUpdate(true)\n        }\n        setValidated(true)\n    };\n\n    return (\n        <FormContainer>\n            <h2 className=\"text-center py-3\">Update Post</h2>\n            {errorUpdate && <Message variant=\"danger\">{errorUpdate}</Message>}\n            {error ? (\n                <Message variant=\"danger\">{error}</Message>\n            ) : (\n                <>\n                    {update && <Message variant=\"success\">Post Updated</Message>}\n                    <Card className=\"card\" border=\"primary\" >\n                        <Card.Body>\n                            <Form noValidate validated={validated} onSubmit={submitHandler}>\n                                <Form.Group controlId=\"title\">\n                                    <Form.Label>Title</Form.Label>\n                                    <Form.Control\n                                        type=\"text\"\n                                        placeholder=\"Enter title of this post\"\n                                        value={title}\n                                        onChange={e => setTitle(e.target.value)}\n                                        required\n                                    />\n                                    <Form.Control.Feedback type=\"invalid\">\n                                        Title required.\n                                    </Form.Control.Feedback>\n                                </Form.Group>\n                                <Form.Group controlId=\"content\" className=\"py-3\">\n                                    <Form.Label>Content</Form.Label>\n                                    <Form.Control\n                                        as=\"textarea\"\n                                        rows=\"5\"\n                                        placeholder=\"Enter content of this post\"\n                                        value={content}\n                                        onChange={e => setContent(e.target.value)}\n                                        required\n                                    />\n                                    <Form.Control.Feedback type=\"invalid\">\n                                        Content required.\n                                    </Form.Control.Feedback>\n                                </Form.Group>\n                                <div className=\"d-grid gap-2\">\n                                    <Button type=\"submit\" variant=\"primary\">\n                                        Update Post\n                                    </Button>\n                                </div>\n                            </Form>\n                        </Card.Body>\n                    </Card>\n                </>\n            )}\n            <Row className=\"py-3 text-center\">\n                <Col>\n                    <Link to='/myposts'>Go Back To My Posts</Link>\n                </Col>\n            </Row>\n        </FormContainer>\n    )\n}\n\nexport default PostEditScreen;","import React, { useState, useEffect } from 'react';\nimport { Card, Form, Button, Row, Col } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getColleges, getCollegeByName } from '../actions/collegeAction';\nimport { getBackground } from '../actions/userAction';\nimport { getAdmissionPercentage } from '../actions/admissionAction';\nimport College from '../components/College';\nimport FormContainer from '../components/FormContainer';\nimport Message from '../components/Message';\nimport { ADMISSION_PERCENTAGE_RESET } from '../constants/admissionConstants';\n\nconst CalculatorScreen = () => {\n    const [collegeName, setCollegeName] = useState('');\n    const [message, setMessage] = useState('');\n\n    const dispatch = useDispatch();\n\n    const { colleges, error } = useSelector(state => state.collegeList);\n\n    const { college, error: errorCollege } = useSelector(state => state.collegeByName);\n\n    const { user, error: errorUser } = useSelector(state => state.userBackground);\n\n    const { percentage, error: errorPercentage } = useSelector(state => state.admissionPercentage);\n\n    useEffect(() => {\n        dispatch(getColleges())\n        dispatch(getBackground())\n    }, [dispatch])\n\n    const submitHandler = (e) => {\n        e.preventDefault();\n        if (user.schoolLevel === 'High School' && (!user.gpa || !user.langScore)) {\n            setMessage('Please enter GPA and Language Test Score in My Background')\n        } else if ((user.schoolLevel === 'Undergraduate' || user.schoolLevel === 'Graduate') && (!user.gpa || !user.langScore || !user.genScore)) {\n            setMessage('Please enter GPA and Language Test Score and General Test Score in My Background')\n        } else {\n            if (collegeName) {\n                dispatch(getCollegeByName({ collegeName }))\n                dispatch({ type: ADMISSION_PERCENTAGE_RESET })\n                dispatch(getAdmissionPercentage({ collegeName }))\n            } else {\n                setMessage('Please select a college')\n            }\n        }\n    }\n\n    return (\n        <>\n            <FormContainer>\n                <h2 className=\"text-center py-3\">Select a School and See the Admission Percentage Based on Your Background</h2>\n                {error && <Message variant='danger'>{error}</Message>}\n                {errorCollege && <Message variant='danger'>{errorCollege}</Message>}\n                {errorUser && <Message variant='danger'>{errorUser}</Message>}\n                {errorPercentage && <Message variant='danger'>{errorPercentage}</Message>}\n                {message && <Message variant='danger'>{message}</Message>}\n                <Card className=\"card\" border=\"primary\">\n                    <Card.Body>\n                        <Form onSubmit={submitHandler}>\n                            <Form.Group controlId=\"school\" className=\"py-3\">\n                                <Form.Label>Select a School you want to apply</Form.Label>\n                                <Form.Control\n                                    as=\"select\"\n                                    className=\"form-select rounded\"\n                                    value={collegeName || ''}\n                                    onChange={e => setCollegeName(e.target.value)}\n                                >\n                                    <option value=\"\">Choose...</option>\n                                    {colleges.map(college => (\n                                        <option value={college.name} key={college.name}>{college.name}</option>\n                                    ))}\n                                </Form.Control>\n                            </Form.Group>\n                            <div className=\"d-grid gap-2\">\n                                <Button type=\"submit\" variant=\"primary\">\n                                    View Percentage\n                                </Button>\n                            </div>\n                        </Form>\n                    </Card.Body>\n                </Card>\n            </FormContainer>\n            {college && college._id &&\n                <div className=\"mt-5\">\n                    {percentage.percentage ? (\n                        <Row className=\"justify-content-md-center\">\n                            <Col md={10}>\n                                <Card className=\"mb-2 p-3 rounded\">\n                                    <strong>{`Based on your academic background, ${percentage.percentage}% of the students who have similar academic backgrounds have been admitted by ${college.name}.`}</strong>\n                                </Card>\n                            </Col>\n                        </Row>\n                    ) : (\n                        <Row className=\"justify-content-md-center\">\n                            <Col md={10}>\n                                <Card className=\"mb-2 p-3 rounded\">\n                                    <strong>{`Based on your academic background, ...% of the students who have similar academic backgrounds have been admitted by ${college.name}.`}</strong>\n                                </Card>\n                            </Col>\n                        </Row>\n                    )}\n                    <Row className=\"justify-content-md-center\">\n                        <Col md={10}>\n                            <College college={college} key={college._id} />\n                        </Col>\n                    </Row>\n                </div>\n            }\n        </>\n    )\n}\n\nexport default CalculatorScreen;","import React from 'react';\nimport { Container } from 'react-bootstrap';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport HomeScreen from './screens/HomeScreen';\nimport LoginScreen from './screens/LoginScreen';\nimport RegisterScreen from './screens/RegisterScreen';\nimport ProfileScreen from './screens/ProfileScreen';\nimport ChangePasswordScreen from './screens/ChangePasswordScreen';\nimport BackgroundScreen from './screens/BackgroundScreen';\nimport CollegeScreen from './screens/CollegeScreen';\nimport CollegeDetailScreen from './screens/CollegeDetailScreen';\nimport AdmissionScreen from './screens/AdmissionScreen';\nimport NewAdmissionScreen from './screens/NewAdmissionScreen';\nimport AdmissionDetailScreen from './screens/AdmissionDetailScreen';\nimport MyAdmissionsScreen from './screens/MyAdmissionsScreen';\nimport AdmissionEditScreen from './screens/AdmissionEditScreen';\nimport ForumScreen from './screens/ForumScreen';\nimport NewPostScreen from './screens/NewPostScreen';\nimport PostDetailScreen from './screens/PostDetailScreen';\nimport MyPostsScreen from './screens/MyPostsScreen';\nimport PostEditScreen from './screens/PostEditScreen';\nimport CalculatorScreen from './screens/CalculatorScreen';\n\nconst App = () => {\n  return (\n    <Router>\n      <Header />\n      <main className=\"py-3\">\n        <Container>\n          <Route path=\"/\" component={HomeScreen} exact />\n          <Route path=\"/login\" component={LoginScreen} />\n          <Route path=\"/register\" component={RegisterScreen} />\n          <Route path='/profile' component={ProfileScreen} />\n          <Route path='/changepassword' component={ChangePasswordScreen} />\n          <Route path='/background' component={BackgroundScreen} />\n          <Route path='/colleges' component={CollegeScreen} exact />\n          <Route path=\"/colleges/search/:keyword\" component={CollegeScreen} exact />\n          <Route path=\"/colleges/:id\" component={CollegeDetailScreen} exact />\n          <Route path='/admissions' component={AdmissionScreen} exact />\n          <Route path='/admissions/search/:keyword' component={AdmissionScreen} exact />\n          <Route path='/admissions/page/:pageNum' component={AdmissionScreen} exact />\n          <Route path='/admissions/search/:keyword/page/:pageNum' component={AdmissionScreen} exact />\n          <Route path='/admissions/:id' component={AdmissionDetailScreen} exact />\n          <Route path=\"/admissions/:id/edit\" component={AdmissionEditScreen} exact />\n          <Route path='/newadmission' component={NewAdmissionScreen} />\n          <Route path='/myadmissions' component={MyAdmissionsScreen} />\n          <Route path='/forums' component={ForumScreen} exact />\n          <Route path='/forums/search/:keyword' component={ForumScreen} exact />\n          <Route path='/forums/page/:pageNum' component={ForumScreen} exact />\n          <Route path='/forums/search/:keyword/page/:pageNum' component={ForumScreen} exact />\n          <Route path='/posts/:id' component={PostDetailScreen} exact />\n          <Route path=\"/posts/:id/edit\" component={PostEditScreen} exact />\n          <Route path='/newpost' component={NewPostScreen} />\n          <Route path='/myposts' component={MyPostsScreen} />\n          <Route path='/calculator' component={CalculatorScreen} />\n        </Container>\n      </main>\n      <Footer />\n    </Router>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport './bootstrap.min.css';\nimport store from './store';\nimport App from './App';\nimport 'mapbox-gl/dist/mapbox-gl.css';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);"],"sourceRoot":""}